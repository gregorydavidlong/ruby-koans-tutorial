var search_data = {"index":{"searchIndex":["aboutarrayassignment","aboutarrays","aboutasserts","aboutblocks","aboutclassmethods","dog","dog2","lastexpressioninclassstatement","aboutclasses","dog","dog2","dog3","dog4","dog5","dog6","dog7","aboutconstants","animal","nestedanimal","myanimals","bird","oyster","reptile","aboutcontrolstatements","aboutdiceproject","aboutexceptions","myspecialerror","abouthashes","aboutinheritance","bulldog","chihuahua","dog","greatdane","aboutiteration","aboutjavainterop","java","javautil","arraylist","aboutmessagepassing","allmessagecatcher","messagecatcher","typicalobject","wellbehavedfoocatcher","aboutmethods","dog","aboutmodules","dog","nameable","aboutnil","aboutobjects","aboutopenclasses","dog","aboutproxyobjectproject","aboutregularexpressions","aboutsandwichcode","aboutscope","jims","dog","joes","dog","string","aboutscoringproject","aboutstrings","aboutsymbols","abouttostr","canbetreatedasstring","cannotbetreatedasstring","abouttriangleproject","abouttriangleproject2","abouttrueandfalse","arraytest","autotest","rubykoan","edgecase","color","koan","sensei","thepath","fillmeinerror","integer","keyerror","object","proxy","string","television","televisiontest","testsomething","triangleerror","__()","___()","____()","_n_()","a_class_method()","a_class_method()","a_zenlike_statement()","acts_like_a_string?()","add_a_payload()","add_progress()","artistic_end_screen()","as_name()","assert_failed?()","bark()","bark()","bark()","bark()","bark()","boring_end_screen()","caught?()","color()","colorize()","command_line()","count_lines()","count_lines2()","count_lines3()","each_step()","embolden_first_line_only()","encourage()","end_of_enlightenment()","end_screen()","even?()","failed()","failed?()","file_sandwich()","find_interesting_lines()","find_line()","find_line2()","get_self()","growl()","guide_through_error()","handle_results()","here()","here()","identify()","identify()","in_ruby_version()","indent()","inherited()","inspect()","instruct()","legs_in_animal()","legs_in_bird()","legs_in_nested_animal()","legs_in_oyster()","legs_in_reptile()","make_test_cmd()","many_yields()","meditate()","method_added()","method_missing()","method_missing()","method_with_block()","method_with_block_arguments()","method_with_defaults()","method_with_explicit_block()","method_with_explicit_return()","method_with_var_args()","method_without_explicit_return()","multiply_all()","my_global_method()","my_method_in_the_same_class()","name()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","observe()","on?()","passed?()","power()","progress()","respond_to?()","ruby_version?()","score()","set_name()","set_name()","set_name()","set_name()","setup()","show_progress()","side_padding()","simple_output()","subclasses()","teardown()","test_a_better_way_of_asserting_equality()","test_a_character_class_can_be_negated()","test_a_failed_match_returns_nil()","test_a_pattern_is_a_regular_expression()","test_a_regexp_can_search_a_string_for_matching_content()","test_a_vertical_pipe_means_or()","test_accessing_array_elements()","test_accessing_hashes()","test_accessing_hashes_with_fetch()","test_adding_to_an_array_with_push()","test_adding_to_an_array_with_shovel_shovel()","test_adding_to_an_array_with_unshift()","test_after_reopening_dogs_can_both_wag_and_bark()","test_all_classes_ultimately_inherit_from_object()","test_all_iteration_methods_work_on_any_collection_not_just_arrays()","test_all_messages_are_caught()","test_all_objects_support_to_s_and_inspect()","test_also_java_class_can_be_given_ruby_aliases()","test_any_ruby_expression_may_be_interpolated()","test_args_to_new_must_match_initialize()","test_array_access()","test_array_literals()","test_arrays_and_ranges()","test_arrays_with_other_objects()","test_as_defined_dogs_do_bark()","test_assert()","test_assert_equality()","test_assert_truth()","test_assert_with_message()","test_asserting_an_error_is_raised()","test_asterisk_means_zero_or_more()","test_attr_accessor_will_automatically_define_both_read_and_write_accessors()","test_attr_reader_will_automatically_define_an_accessor()","test_bare_bones_class_names_assume_the_current_scope()","test_basic_arrays()","test_block_can_affect_variables_in_the_code_where_they_are_created()","test_blocks_can_be_assigned_to_variables_and_called_explicitly()","test_blocks_can_be_defined_with_do_end_too()","test_blocks_can_take_arguments()","test_break_statement()","test_break_statement_returns_values()","test_break_works_with_each_style_iterations()","test_calling_global_methods()","test_calling_global_methods_with_wrong_number_of_arguments()","test_calling_global_methods_without_parentheses()","test_calling_method_missing_causes_the_no_method_error()","test_calling_methods_in_other_objects_require_explicit_receiver()","test_calling_methods_in_same_class()","test_calling_methods_in_same_class_with_explicit_receiver()","test_calling_private_methods_in_other_objects()","test_calling_private_methods_with_an_explicit_receiver()","test_calling_private_methods_without_receiver()","test_calling_with_default_values()","test_calling_with_variable_arguments()","test_can_create_a_dice_set()","test_can_directly_call_java_methods_on_java_objects()","test_can_set_the_channel()","test_cant_instantiate_modules()","test_caret_anchors_to_the_start_of_lines()","test_catching_messages_makes_respond_to_lie()","test_changing_hashes()","test_character_classes_can_include_ranges()","test_character_classes_give_options_for_a_character()","test_class_methods_are_independent_of_instance_methods()","test_class_names_are_just_constants()","test_class_statements_return_the_value_of_their_last_expression()","test_classes_and_instances_do_not_share_instance_variables()","test_classes_are_classes()","test_classes_are_objects_too()","test_classes_can_be_asked_if_they_know_how_to_respond()","test_classes_can_override_module_methods()","test_classes_have_methods()","test_clone_creates_a_different_object()","test_collect_transforms_elements_of_an_array()","test_combining_hashes()","test_condition_operators()","test_constants_are_defined_with_an_initial_uppercase_letter()","test_constants_become_symbols()","test_constants_can_be_looked_up_explicitly()","test_counting_lines()","test_counting_lines2()","test_creating_arrays()","test_creating_hashes()","test_default_value()","test_default_value_is_the_same_object()","test_default_value_with_block()","test_dice_values_do_not_change_unless_explicitly_rolled()","test_dice_values_should_change_between_rolls()","test_different_objects_have_different_instance_variables()","test_dog_is_not_available_in_the_current_scope()","test_dollar_sign_anchors_to_the_end_of_lines()","test_double_quoted_string_interpret_escape_characters()","test_double_quoted_strings_are_strings()","test_double_quoted_strings_interpolate_variables()","test_each_can_use_curly_brace_blocks_too()","test_each_is_a_method_on_arrays()","test_edge_case_on_off()","test_ensure_clause()","test_equilateral_triangles_have_equal_sides()","test_even_existing_built_in_classes_can_be_reopened()","test_every_object_has_an_id()","test_every_object_has_different_id()","test_everything_else_is_treated_as_true()","test_everything_is_an_object()","test_exceptions_inherit_from_exception()","test_explicitly_implementing_respond_to_lets_objects_tell_the_truth()","test_false_is_treated_as_false()","test_fill_in_values()","test_find_locates_the_first_element_matching_a_criteria()","test_finding_lines()","test_finding_lines2()","test_flexible_quotes_can_handle_multiple_lines()","test_foo_method_are_caught()","test_for_statement()","test_gsub_is_like_find_and_replace_all()","test_hash_is_unordered()","test_hash_keys()","test_hash_literals()","test_hash_values()","test_here_documents_can_also_handle_multiple_lines()","test_however_most_methods_returning_strings_return_ruby_strings()","test_identical_symbols_are_a_single_internal_object()","test_if_statement_modifiers()","test_if_statements_return_values()","test_if_statements_with_no_else_with_false_condition_return_value()","test_if_then_else_statements()","test_if_then_statements()","test_illegal_triangles_throw_exceptions()","test_in_ruby_1_8_single_characters_are_represented_by_integers()","test_in_ruby_1_9_single_characters_are_represented_by_strings()","test_include_class_includes_class_in_module_scope()","test_initialize_provides_initial_values_for_instance_variables()","test_inject_will_blow_your_mind()","test_inside_a_method_self_refers_to_the_containing_object()","test_inspect_provides_a_more_complete_string_version()","test_instance_variables_can_be_set_by_assigning_to_them()","test_instance_variables_cannot_be_accessed_outside_the_class()","test_instances_of_classes_can_be_created_with_new()","test_isosceles_triangles_have_exactly_two_sides_equal()","test_it_also_turns_off()","test_it_turns_on()","test_iterating_with_each()","test_java_class_are_open_from_ruby()","test_java_class_can_be_referenced_using_both_ruby_and_java_like_syntax()","test_java_collections_are_enumerable()","test_java_string_are_not_ruby_strings()","test_java_strings_can_be_compared_to_ruby_strings_maybe()","test_jruby_provides_question_mark_versions_of_boolean_methods()","test_jruby_provides_snake_case_versions_of_java_methods()","test_method_names_become_symbols()","test_method_with_explicit_return()","test_method_without_explicit_return()","test_methods_can_be_called_directly()","test_methods_can_be_invoked_by_sending_the_message()","test_methods_can_be_invoked_more_dynamically()","test_methods_can_call_yield_many_times()","test_methods_can_see_if_they_have_been_called_with_a_block()","test_methods_can_take_an_explicit_block_argument()","test_methods_can_take_blocks()","test_module_methods_are_also_available_in_the_object()","test_module_methods_can_affect_instance_variables_in_the_object()","test_nested_classes_inherit_constants_from_enclosing_classes()","test_nested_constants_are_referenced_by_their_complete_path()","test_nested_constants_may_also_be_referenced_with_relative_paths()","test_nested_string_is_not_the_same_as_the_system_string()","test_next_statement()","test_nil_has_a_few_methods_defined_on_it()","test_nil_is_an_object()","test_nil_is_treated_as_false_too()","test_non_foo_messages_are_treated_normally()","test_non_parallel_assignment()","test_normal_methods_are_available_in_the_object()","test_normally_objects_cannot_be_used_where_strings_are_expected()","test_objects_are_objects()","test_objects_can_be_converted_to_strings()","test_objects_can_be_inspected()","test_objects_have_methods()","test_open_handles_the_file_sandwich_when_given_a_block()","test_other_objects_are_not_affected_by_these_singleton_methods()","test_parallel_assignment_with_one_variable()","test_parallel_assignments()","test_parallel_assignments_with_extra_values()","test_parallel_assignments_with_splat_operator()","test_parallel_assignments_with_subarrays()","test_parallel_assignments_with_too_few_variables()","test_parentheses_also_capture_matched_content_by_number()","test_parentheses_group_contents()","test_pattern()","test_period_is_a_shortcut_for_any_non_newline_character()","test_plus_concatenation_will_leave_the_original_strings_unmodified()","test_plus_equals_also_will_leave_the_original_string_unmodified()","test_plus_equals_will_concatenate_to_the_end_of_a_string()","test_plus_means_one_or_more()","test_plus_will_concatenate_two_strings()","test_proxy_can_record_more_than_just_tv_objects()","test_proxy_counts_method_calls()","test_proxy_handles_invalid_messages()","test_proxy_method_returns_wrapped_object()","test_proxy_records_messages_sent_to_tv()","test_proxy_reports_methods_have_been_called()","test_pushing_and_popping_arrays()","test_question_mark_means_optional()","test_raising_a_particular_error()","test_rescue_clause()","test_rolling_the_dice_returns_a_set_of_integers_between_1_and_6()","test_scalene_triangles_have_no_equal_sides()","test_scan_is_like_find_all()","test_score_of_a_single_roll_of_1_is_100()","test_score_of_a_single_roll_of_5_is_50()","test_score_of_a_triple_1_is_1000()","test_score_of_an_empty_list_is_zero()","test_score_of_mixed_is_sum()","test_score_of_multiple_1s_and_5s_is_the_sum_of_individual_scores()","test_score_of_other_triples_is_100x()","test_score_of_single_2s_3s_4s_and_6s_are_zero()","test_select_selects_certain_items_from_an_array()","test_send_with_underscores_will_also_send_messages()","test_sending_a_message_with_arguments()","test_sending_undefined_messages_to_a_typical_object_results_in_errors()","test_shifting_arrays()","test_shortcut_character_classes_are_negated_with_capitals()","test_since_classes_are_objects_you_can_define_singleton_methods_on_them_too()","test_single_quoted_string_do_not_interpret_escape_characters()","test_single_quoted_strings_are_also_strings()","test_single_quoted_strings_do_not_interpolate()","test_single_quotes_sometimes_interpret_escape_characters()","test_slash_a_anchors_to_the_start_of_the_string()","test_slash_b_anchors_to_a_word_boundary()","test_slash_d_is_a_shortcut_for_a_digit_character_class()","test_slash_s_is_a_shortcut_for_a_whitespace_character_class()","test_slash_w_is_a_shortcut_for_a_word_character_class()","test_slash_z_anchors_to_the_end_of_the_string()","test_slicing_arrays()","test_slicing_with_ranges()","test_small_integers_have_fixed_ids()","test_some_ruby_objects_are_not_coerced_to_what_you_might_expect()","test_some_ruby_objects_can_be_coerced_to_java()","test_some_system_objects_always_have_the_same_id()","test_sometimes_missing_parentheses_are_ambiguous()","test_stand_alone_blocks_can_be_passed_to_methods_expecting_blocks()","test_strings_are_unique_objects()","test_strings_can_be_joined()","test_strings_can_be_split()","test_strings_can_be_split_with_different_patterns()","test_sub_is_like_find_and_replace()","test_subclasses_add_new_behavior()","test_subclasses_can_invoke_parent_behavior_via_super()","test_subclasses_can_modify_existing_behavior()","test_subclasses_have_the_parent_as_an_ancestor()","test_subclasses_inherit_behavior_from_parent_class()","test_subclasses_inherit_constants_from_parent_classes()","test_super_does_not_work_cross_method()","test_swapping_with_parallel_assignment()","test_symbols_are_not_strings()","test_symbols_are_symbols()","test_symbols_can_be_compared()","test_symbols_can_be_dynamically_created()","test_symbols_can_be_made_from_strings()","test_symbols_cannot_be_concatenated()","test_symbols_do_not_have_string_methods()","test_symbols_with_interpolation_can_be_built()","test_symbols_with_spaces_can_be_built()","test_the_left_most_match_wins()","test_the_shovel_operator_modifies_the_original_string()","test_the_shovel_operator_will_also_append_content_to_a_string()","test_to_s_is_called_on_interpolated_symbols()","test_to_s_is_used_in_string_interpolation()","test_to_s_provides_a_string_version_of_the_object()","test_to_s_returns_a_string_representation()","test_to_str_allows_objects_to_be_treated_as_strings()","test_to_str_also_returns_a_string_representation()","test_top_level_constants_are_referenced_by_double_colons()","test_true_is_treated_as_true()","test_tv_methods_still_perform_their_function()","test_unless_statement()","test_unless_statement_evaluate_true()","test_unless_statement_modifier()","test_use_backslash_for_those_hard_cases()","test_use_double_quotes_to_create_strings_with_single_quotes()","test_use_flexible_quoting_to_handle_really_hard_cases()","test_use_single_quotes_to_create_string_with_double_quotes()","test_use_the_prefix_scope_operator_to_force_the_global_scope()","test_user_defined_code_can_check_for_to_str()","test_using_a_java_library_class()","test_variables_can_also_be_used_to_access_captures()","test_while_statement()","test_who_wins_with_both_nested_and_inherited_constants()","test_who_wins_with_explicit_scoping_on_class_definition()","test_you_can_create_accessor_methods_to_return_instance_variables()","test_you_can_define_class_methods_inside_the_class()","test_you_can_define_methods_on_individual_objects()","test_you_can_get_a_list_of_constants_for_any_class_or_module()","test_you_can_get_a_single_character_from_a_string()","test_you_can_get_a_substring_from_a_string()","test_you_can_politely_ask_for_instance_variable_values()","test_you_can_reference_nested_classes_using_the_scope_operator()","test_you_can_rip_the_value_out_using_instance_eval()","test_you_can_roll_different_numbers_of_dice()","test_you_dont_get_null_pointer_errors_when_calling_methods_on_nil()","testmethods()","tests_disabled?()","to_s()","to_s()","to_s()","to_str()","total_tests()","triangle()","truth_value()","use_colors?()","using_win32console()","using_windows?()","wag()","wag()","wag()","wag()","walk()","yield_tester()","greed_rules","readme","example_file"],"longSearchIndex":["aboutarrayassignment","aboutarrays","aboutasserts","aboutblocks","aboutclassmethods","aboutclassmethods::dog","aboutclassmethods::dog2","aboutclassmethods::lastexpressioninclassstatement","aboutclasses","aboutclasses::dog","aboutclasses::dog2","aboutclasses::dog3","aboutclasses::dog4","aboutclasses::dog5","aboutclasses::dog6","aboutclasses::dog7","aboutconstants","aboutconstants::animal","aboutconstants::animal::nestedanimal","aboutconstants::myanimals","aboutconstants::myanimals::bird","aboutconstants::myanimals::oyster","aboutconstants::reptile","aboutcontrolstatements","aboutdiceproject","aboutexceptions","aboutexceptions::myspecialerror","abouthashes","aboutinheritance","aboutinheritance::bulldog","aboutinheritance::chihuahua","aboutinheritance::dog","aboutinheritance::greatdane","aboutiteration","aboutjavainterop","aboutjavainterop::java","aboutjavainterop::java::javautil","aboutjavainterop::java::javautil::arraylist","aboutmessagepassing","aboutmessagepassing::allmessagecatcher","aboutmessagepassing::messagecatcher","aboutmessagepassing::typicalobject","aboutmessagepassing::wellbehavedfoocatcher","aboutmethods","aboutmethods::dog","aboutmodules","aboutmodules::dog","aboutmodules::nameable","aboutnil","aboutobjects","aboutopenclasses","aboutopenclasses::dog","aboutproxyobjectproject","aboutregularexpressions","aboutsandwichcode","aboutscope","aboutscope::jims","aboutscope::jims::dog","aboutscope::joes","aboutscope::joes::dog","aboutscope::string","aboutscoringproject","aboutstrings","aboutsymbols","abouttostr","abouttostr::canbetreatedasstring","abouttostr::cannotbetreatedasstring","abouttriangleproject","abouttriangleproject2","abouttrueandfalse","arraytest","autotest","autotest::rubykoan","edgecase","edgecase::color","edgecase::koan","edgecase::sensei","edgecase::thepath","fillmeinerror","integer","keyerror","object","proxy","string","television","televisiontest","testsomething","triangleerror","object#__()","object#___()","object#____()","object#_n_()","aboutclassmethods::dog::a_class_method()","aboutclassmethods::dog::a_class_method()","edgecase::sensei#a_zenlike_statement()","abouttostr#acts_like_a_string?()","aboutmessagepassing::messagecatcher#add_a_payload()","edgecase::sensei#add_progress()","edgecase::sensei#artistic_end_screen()","aboutiteration#as_name()","edgecase::sensei#assert_failed?()","aboutinheritance::bulldog#bark()","aboutinheritance::chihuahua#bark()","aboutinheritance::dog#bark()","aboutmodules::dog#bark()","aboutopenclasses::dog#bark()","edgecase::sensei#boring_end_screen()","aboutmessagepassing::messagecatcher#caught?()","edgecase::color#color()","edgecase::color#colorize()","edgecase::koan::command_line()","aboutsandwichcode#count_lines()","aboutsandwichcode#count_lines2()","aboutsandwichcode#count_lines3()","edgecase::thepath#each_step()","edgecase::sensei#embolden_first_line_only()","edgecase::sensei#encourage()","edgecase::koan::end_of_enlightenment()","edgecase::sensei#end_screen()","integer#even?()","edgecase::koan#failed()","edgecase::sensei#failed?()","aboutsandwichcode#file_sandwich()","edgecase::sensei#find_interesting_lines()","aboutsandwichcode#find_line()","aboutsandwichcode#find_line2()","aboutclasses::dog7#get_self()","aboutinheritance::greatdane#growl()","edgecase::sensei#guide_through_error()","autotest::rubykoan#handle_results()","aboutmodules::dog#here()","aboutmodules::nameable#here()","aboutscope::jims::dog#identify()","aboutscope::joes::dog#identify()","object#in_ruby_version()","edgecase::sensei#indent()","edgecase::koan::inherited()","aboutclasses::dog7#inspect()","edgecase::sensei#instruct()","aboutconstants::animal#legs_in_animal()","aboutconstants::myanimals::bird#legs_in_bird()","aboutconstants::animal::nestedanimal#legs_in_nested_animal()","aboutconstants::myanimals::oyster#legs_in_oyster()","aboutconstants::reptile#legs_in_reptile()","autotest::rubykoan#make_test_cmd()","aboutblocks#many_yields()","edgecase::koan#meditate()","edgecase::koan::method_added()","aboutmessagepassing::allmessagecatcher#method_missing()","aboutmessagepassing::wellbehavedfoocatcher#method_missing()","aboutblocks#method_with_block()","aboutblocks#method_with_block_arguments()","aboutmethods#method_with_defaults()","aboutblocks#method_with_explicit_block()","aboutmethods#method_with_explicit_return()","aboutmethods#method_with_var_args()","aboutmethods#method_without_explicit_return()","aboutjavainterop::java::javautil::arraylist#multiply_all()","object#my_global_method()","aboutmethods#my_method_in_the_same_class()","aboutclassmethods::dog::name()","aboutclassmethods::dog::name()","aboutclasses::dog3#name()","aboutmethods::dog#name()","aboutclasses::dog6::new()","aboutclasses::dog7::new()","aboutinheritance::dog::new()","aboutmodules::dog::new()","autotest::rubykoan::new()","edgecase::koan::new()","edgecase::sensei::new()","proxy::new()","edgecase::sensei#observe()","television#on?()","edgecase::koan#passed?()","television#power()","edgecase::sensei#progress()","aboutmessagepassing::wellbehavedfoocatcher#respond_to?()","object#ruby_version?()","object#score()","aboutclasses::dog2#set_name()","aboutclasses::dog3#set_name()","aboutclasses::dog4#set_name()","aboutmodules::nameable#set_name()","edgecase::koan#setup()","edgecase::sensei#show_progress()","string#side_padding()","edgecase::simple_output()","edgecase::koan::subclasses()","edgecase::koan#teardown()","aboutasserts#test_a_better_way_of_asserting_equality()","aboutregularexpressions#test_a_character_class_can_be_negated()","aboutregularexpressions#test_a_failed_match_returns_nil()","aboutregularexpressions#test_a_pattern_is_a_regular_expression()","aboutregularexpressions#test_a_regexp_can_search_a_string_for_matching_content()","aboutregularexpressions#test_a_vertical_pipe_means_or()","aboutarrays#test_accessing_array_elements()","abouthashes#test_accessing_hashes()","abouthashes#test_accessing_hashes_with_fetch()","arraytest#test_adding_to_an_array_with_push()","arraytest#test_adding_to_an_array_with_shovel_shovel()","arraytest#test_adding_to_an_array_with_unshift()","aboutopenclasses#test_after_reopening_dogs_can_both_wag_and_bark()","aboutinheritance#test_all_classes_ultimately_inherit_from_object()","aboutiteration#test_all_iteration_methods_work_on_any_collection_not_just_arrays()","aboutmessagepassing#test_all_messages_are_caught()","aboutclasses#test_all_objects_support_to_s_and_inspect()","aboutjavainterop#test_also_java_class_can_be_given_ruby_aliases()","aboutstrings#test_any_ruby_expression_may_be_interpolated()","aboutclasses#test_args_to_new_must_match_initialize()","arraytest#test_array_access()","aboutarrays#test_array_literals()","aboutarrays#test_arrays_and_ranges()","arraytest#test_arrays_with_other_objects()","aboutopenclasses#test_as_defined_dogs_do_bark()","testsomething#test_assert()","aboutasserts#test_assert_equality()","aboutasserts#test_assert_truth()","aboutasserts#test_assert_with_message()","aboutexceptions#test_asserting_an_error_is_raised()","aboutregularexpressions#test_asterisk_means_zero_or_more()","aboutclasses#test_attr_accessor_will_automatically_define_both_read_and_write_accessors()","aboutclasses#test_attr_reader_will_automatically_define_an_accessor()","aboutscope#test_bare_bones_class_names_assume_the_current_scope()","arraytest#test_basic_arrays()","aboutblocks#test_block_can_affect_variables_in_the_code_where_they_are_created()","aboutblocks#test_blocks_can_be_assigned_to_variables_and_called_explicitly()","aboutblocks#test_blocks_can_be_defined_with_do_end_too()","aboutblocks#test_blocks_can_take_arguments()","aboutcontrolstatements#test_break_statement()","aboutcontrolstatements#test_break_statement_returns_values()","aboutiteration#test_break_works_with_each_style_iterations()","aboutmethods#test_calling_global_methods()","aboutmethods#test_calling_global_methods_with_wrong_number_of_arguments()","aboutmethods#test_calling_global_methods_without_parentheses()","aboutmessagepassing#test_calling_method_missing_causes_the_no_method_error()","aboutmethods#test_calling_methods_in_other_objects_require_explicit_receiver()","aboutmethods#test_calling_methods_in_same_class()","aboutmethods#test_calling_methods_in_same_class_with_explicit_receiver()","aboutmethods#test_calling_private_methods_in_other_objects()","aboutmethods#test_calling_private_methods_with_an_explicit_receiver()","aboutmethods#test_calling_private_methods_without_receiver()","aboutmethods#test_calling_with_default_values()","aboutmethods#test_calling_with_variable_arguments()","aboutdiceproject#test_can_create_a_dice_set()","aboutjavainterop#test_can_directly_call_java_methods_on_java_objects()","televisiontest#test_can_set_the_channel()","aboutmodules#test_cant_instantiate_modules()","aboutregularexpressions#test_caret_anchors_to_the_start_of_lines()","aboutmessagepassing#test_catching_messages_makes_respond_to_lie()","abouthashes#test_changing_hashes()","aboutregularexpressions#test_character_classes_can_include_ranges()","aboutregularexpressions#test_character_classes_give_options_for_a_character()","aboutclassmethods#test_class_methods_are_independent_of_instance_methods()","aboutscope#test_class_names_are_just_constants()","object#test_class_statements_return_the_value_of_their_last_expression()","aboutclassmethods#test_classes_and_instances_do_not_share_instance_variables()","aboutclassmethods#test_classes_are_classes()","aboutclassmethods#test_classes_are_objects_too()","aboutmessagepassing#test_classes_can_be_asked_if_they_know_how_to_respond()","aboutmodules#test_classes_can_override_module_methods()","aboutclassmethods#test_classes_have_methods()","aboutobjects#test_clone_creates_a_different_object()","aboutiteration#test_collect_transforms_elements_of_an_array()","abouthashes#test_combining_hashes()","aboutcontrolstatements#test_condition_operators()","aboutscope#test_constants_are_defined_with_an_initial_uppercase_letter()","aboutsymbols#test_constants_become_symbols()","aboutscope#test_constants_can_be_looked_up_explicitly()","aboutsandwichcode#test_counting_lines()","aboutsandwichcode#test_counting_lines2()","aboutarrays#test_creating_arrays()","abouthashes#test_creating_hashes()","abouthashes#test_default_value()","abouthashes#test_default_value_is_the_same_object()","abouthashes#test_default_value_with_block()","aboutdiceproject#test_dice_values_do_not_change_unless_explicitly_rolled()","aboutdiceproject#test_dice_values_should_change_between_rolls()","aboutclasses#test_different_objects_have_different_instance_variables()","aboutscope#test_dog_is_not_available_in_the_current_scope()","aboutregularexpressions#test_dollar_sign_anchors_to_the_end_of_lines()","aboutstrings#test_double_quoted_string_interpret_escape_characters()","aboutstrings#test_double_quoted_strings_are_strings()","aboutstrings#test_double_quoted_strings_interpolate_variables()","aboutiteration#test_each_can_use_curly_brace_blocks_too()","aboutiteration#test_each_is_a_method_on_arrays()","televisiontest#test_edge_case_on_off()","aboutexceptions#test_ensure_clause()","abouttriangleproject#test_equilateral_triangles_have_equal_sides()","aboutopenclasses#test_even_existing_built_in_classes_can_be_reopened()","aboutobjects#test_every_object_has_an_id()","aboutobjects#test_every_object_has_different_id()","abouttrueandfalse#test_everything_else_is_treated_as_true()","aboutobjects#test_everything_is_an_object()","aboutexceptions#test_exceptions_inherit_from_exception()","aboutmessagepassing#test_explicitly_implementing_respond_to_lets_objects_tell_the_truth()","abouttrueandfalse#test_false_is_treated_as_false()","aboutasserts#test_fill_in_values()","aboutiteration#test_find_locates_the_first_element_matching_a_criteria()","aboutsandwichcode#test_finding_lines()","aboutsandwichcode#test_finding_lines2()","aboutstrings#test_flexible_quotes_can_handle_multiple_lines()","aboutmessagepassing#test_foo_method_are_caught()","aboutcontrolstatements#test_for_statement()","aboutregularexpressions#test_gsub_is_like_find_and_replace_all()","abouthashes#test_hash_is_unordered()","abouthashes#test_hash_keys()","abouthashes#test_hash_literals()","abouthashes#test_hash_values()","aboutstrings#test_here_documents_can_also_handle_multiple_lines()","aboutjavainterop#test_however_most_methods_returning_strings_return_ruby_strings()","aboutsymbols#test_identical_symbols_are_a_single_internal_object()","aboutcontrolstatements#test_if_statement_modifiers()","aboutcontrolstatements#test_if_statements_return_values()","aboutcontrolstatements#test_if_statements_with_no_else_with_false_condition_return_value()","aboutcontrolstatements#test_if_then_else_statements()","aboutcontrolstatements#test_if_then_statements()","abouttriangleproject2#test_illegal_triangles_throw_exceptions()","aboutstrings#test_in_ruby_1_8_single_characters_are_represented_by_integers()","aboutstrings#test_in_ruby_1_9_single_characters_are_represented_by_strings()","aboutjavainterop#test_include_class_includes_class_in_module_scope()","aboutclasses#test_initialize_provides_initial_values_for_instance_variables()","aboutiteration#test_inject_will_blow_your_mind()","aboutclasses#test_inside_a_method_self_refers_to_the_containing_object()","aboutclasses#test_inspect_provides_a_more_complete_string_version()","aboutclasses#test_instance_variables_can_be_set_by_assigning_to_them()","aboutclasses#test_instance_variables_cannot_be_accessed_outside_the_class()","aboutclasses#test_instances_of_classes_can_be_created_with_new()","abouttriangleproject#test_isosceles_triangles_have_exactly_two_sides_equal()","televisiontest#test_it_also_turns_off()","televisiontest#test_it_turns_on()","aboutiteration#test_iterating_with_each()","aboutjavainterop#test_java_class_are_open_from_ruby()","aboutjavainterop#test_java_class_can_be_referenced_using_both_ruby_and_java_like_syntax()","aboutjavainterop#test_java_collections_are_enumerable()","aboutjavainterop#test_java_string_are_not_ruby_strings()","aboutjavainterop#test_java_strings_can_be_compared_to_ruby_strings_maybe()","aboutjavainterop#test_jruby_provides_question_mark_versions_of_boolean_methods()","aboutjavainterop#test_jruby_provides_snake_case_versions_of_java_methods()","aboutsymbols#test_method_names_become_symbols()","aboutmethods#test_method_with_explicit_return()","aboutmethods#test_method_without_explicit_return()","aboutmessagepassing#test_methods_can_be_called_directly()","aboutmessagepassing#test_methods_can_be_invoked_by_sending_the_message()","aboutmessagepassing#test_methods_can_be_invoked_more_dynamically()","aboutblocks#test_methods_can_call_yield_many_times()","aboutblocks#test_methods_can_see_if_they_have_been_called_with_a_block()","aboutblocks#test_methods_can_take_an_explicit_block_argument()","aboutblocks#test_methods_can_take_blocks()","aboutmodules#test_module_methods_are_also_available_in_the_object()","aboutmodules#test_module_methods_can_affect_instance_variables_in_the_object()","aboutconstants#test_nested_classes_inherit_constants_from_enclosing_classes()","aboutconstants#test_nested_constants_are_referenced_by_their_complete_path()","aboutconstants#test_nested_constants_may_also_be_referenced_with_relative_paths()","aboutscope#test_nested_string_is_not_the_same_as_the_system_string()","aboutcontrolstatements#test_next_statement()","aboutnil#test_nil_has_a_few_methods_defined_on_it()","aboutnil#test_nil_is_an_object()","abouttrueandfalse#test_nil_is_treated_as_false_too()","aboutmessagepassing#test_non_foo_messages_are_treated_normally()","aboutarrayassignment#test_non_parallel_assignment()","aboutmodules#test_normal_methods_are_available_in_the_object()","abouttostr#test_normally_objects_cannot_be_used_where_strings_are_expected()","aboutclassmethods#test_objects_are_objects()","aboutobjects#test_objects_can_be_converted_to_strings()","aboutobjects#test_objects_can_be_inspected()","aboutclassmethods#test_objects_have_methods()","aboutsandwichcode#test_open_handles_the_file_sandwich_when_given_a_block()","aboutclassmethods#test_other_objects_are_not_affected_by_these_singleton_methods()","aboutarrayassignment#test_parallel_assignment_with_one_variable()","aboutarrayassignment#test_parallel_assignments()","aboutarrayassignment#test_parallel_assignments_with_extra_values()","aboutarrayassignment#test_parallel_assignments_with_splat_operator()","aboutarrayassignment#test_parallel_assignments_with_subarrays()","aboutarrayassignment#test_parallel_assignments_with_too_few_variables()","aboutregularexpressions#test_parentheses_also_capture_matched_content_by_number()","aboutregularexpressions#test_parentheses_group_contents()","edgecase::koan::test_pattern()","aboutregularexpressions#test_period_is_a_shortcut_for_any_non_newline_character()","aboutstrings#test_plus_concatenation_will_leave_the_original_strings_unmodified()","aboutstrings#test_plus_equals_also_will_leave_the_original_string_unmodified()","aboutstrings#test_plus_equals_will_concatenate_to_the_end_of_a_string()","aboutregularexpressions#test_plus_means_one_or_more()","aboutstrings#test_plus_will_concatenate_two_strings()","aboutproxyobjectproject#test_proxy_can_record_more_than_just_tv_objects()","aboutproxyobjectproject#test_proxy_counts_method_calls()","aboutproxyobjectproject#test_proxy_handles_invalid_messages()","aboutproxyobjectproject#test_proxy_method_returns_wrapped_object()","aboutproxyobjectproject#test_proxy_records_messages_sent_to_tv()","aboutproxyobjectproject#test_proxy_reports_methods_have_been_called()","aboutarrays#test_pushing_and_popping_arrays()","aboutregularexpressions#test_question_mark_means_optional()","aboutexceptions#test_raising_a_particular_error()","aboutexceptions#test_rescue_clause()","aboutdiceproject#test_rolling_the_dice_returns_a_set_of_integers_between_1_and_6()","abouttriangleproject#test_scalene_triangles_have_no_equal_sides()","aboutregularexpressions#test_scan_is_like_find_all()","aboutscoringproject#test_score_of_a_single_roll_of_1_is_100()","aboutscoringproject#test_score_of_a_single_roll_of_5_is_50()","aboutscoringproject#test_score_of_a_triple_1_is_1000()","aboutscoringproject#test_score_of_an_empty_list_is_zero()","aboutscoringproject#test_score_of_mixed_is_sum()","aboutscoringproject#test_score_of_multiple_1s_and_5s_is_the_sum_of_individual_scores()","aboutscoringproject#test_score_of_other_triples_is_100x()","aboutscoringproject#test_score_of_single_2s_3s_4s_and_6s_are_zero()","aboutiteration#test_select_selects_certain_items_from_an_array()","aboutmessagepassing#test_send_with_underscores_will_also_send_messages()","aboutmessagepassing#test_sending_a_message_with_arguments()","aboutmessagepassing#test_sending_undefined_messages_to_a_typical_object_results_in_errors()","aboutarrays#test_shifting_arrays()","aboutregularexpressions#test_shortcut_character_classes_are_negated_with_capitals()","aboutclassmethods#test_since_classes_are_objects_you_can_define_singleton_methods_on_them_too()","aboutstrings#test_single_quoted_string_do_not_interpret_escape_characters()","aboutstrings#test_single_quoted_strings_are_also_strings()","aboutstrings#test_single_quoted_strings_do_not_interpolate()","aboutstrings#test_single_quotes_sometimes_interpret_escape_characters()","aboutregularexpressions#test_slash_a_anchors_to_the_start_of_the_string()","aboutregularexpressions#test_slash_b_anchors_to_a_word_boundary()","aboutregularexpressions#test_slash_d_is_a_shortcut_for_a_digit_character_class()","aboutregularexpressions#test_slash_s_is_a_shortcut_for_a_whitespace_character_class()","aboutregularexpressions#test_slash_w_is_a_shortcut_for_a_word_character_class()","aboutregularexpressions#test_slash_z_anchors_to_the_end_of_the_string()","aboutarrays#test_slicing_arrays()","aboutarrays#test_slicing_with_ranges()","aboutobjects#test_small_integers_have_fixed_ids()","aboutjavainterop#test_some_ruby_objects_are_not_coerced_to_what_you_might_expect()","aboutjavainterop#test_some_ruby_objects_can_be_coerced_to_java()","aboutobjects#test_some_system_objects_always_have_the_same_id()","aboutmethods#test_sometimes_missing_parentheses_are_ambiguous()","aboutblocks#test_stand_alone_blocks_can_be_passed_to_methods_expecting_blocks()","aboutstrings#test_strings_are_unique_objects()","aboutstrings#test_strings_can_be_joined()","aboutstrings#test_strings_can_be_split()","aboutstrings#test_strings_can_be_split_with_different_patterns()","aboutregularexpressions#test_sub_is_like_find_and_replace()","aboutinheritance#test_subclasses_add_new_behavior()","aboutinheritance#test_subclasses_can_invoke_parent_behavior_via_super()","aboutinheritance#test_subclasses_can_modify_existing_behavior()","aboutinheritance#test_subclasses_have_the_parent_as_an_ancestor()","aboutinheritance#test_subclasses_inherit_behavior_from_parent_class()","aboutconstants#test_subclasses_inherit_constants_from_parent_classes()","aboutinheritance#test_super_does_not_work_cross_method()","aboutarrayassignment#test_swapping_with_parallel_assignment()","aboutsymbols#test_symbols_are_not_strings()","aboutsymbols#test_symbols_are_symbols()","aboutsymbols#test_symbols_can_be_compared()","aboutsymbols#test_symbols_can_be_dynamically_created()","aboutsymbols#test_symbols_can_be_made_from_strings()","aboutsymbols#test_symbols_cannot_be_concatenated()","aboutsymbols#test_symbols_do_not_have_string_methods()","aboutsymbols#test_symbols_with_interpolation_can_be_built()","aboutsymbols#test_symbols_with_spaces_can_be_built()","aboutregularexpressions#test_the_left_most_match_wins()","aboutstrings#test_the_shovel_operator_modifies_the_original_string()","aboutstrings#test_the_shovel_operator_will_also_append_content_to_a_string()","aboutsymbols#test_to_s_is_called_on_interpolated_symbols()","aboutclasses#test_to_s_is_used_in_string_interpolation()","aboutclasses#test_to_s_provides_a_string_version_of_the_object()","abouttostr#test_to_s_returns_a_string_representation()","abouttostr#test_to_str_allows_objects_to_be_treated_as_strings()","abouttostr#test_to_str_also_returns_a_string_representation()","aboutconstants#test_top_level_constants_are_referenced_by_double_colons()","abouttrueandfalse#test_true_is_treated_as_true()","aboutproxyobjectproject#test_tv_methods_still_perform_their_function()","aboutcontrolstatements#test_unless_statement()","aboutcontrolstatements#test_unless_statement_evaluate_true()","aboutcontrolstatements#test_unless_statement_modifier()","aboutstrings#test_use_backslash_for_those_hard_cases()","aboutstrings#test_use_double_quotes_to_create_strings_with_single_quotes()","aboutstrings#test_use_flexible_quoting_to_handle_really_hard_cases()","aboutstrings#test_use_single_quotes_to_create_string_with_double_quotes()","aboutscope#test_use_the_prefix_scope_operator_to_force_the_global_scope()","abouttostr#test_user_defined_code_can_check_for_to_str()","aboutjavainterop#test_using_a_java_library_class()","aboutregularexpressions#test_variables_can_also_be_used_to_access_captures()","aboutcontrolstatements#test_while_statement()","aboutconstants#test_who_wins_with_both_nested_and_inherited_constants()","aboutconstants#test_who_wins_with_explicit_scoping_on_class_definition()","aboutclasses#test_you_can_create_accessor_methods_to_return_instance_variables()","aboutclassmethods#test_you_can_define_class_methods_inside_the_class()","aboutclassmethods#test_you_can_define_methods_on_individual_objects()","aboutscope#test_you_can_get_a_list_of_constants_for_any_class_or_module()","aboutstrings#test_you_can_get_a_single_character_from_a_string()","aboutstrings#test_you_can_get_a_substring_from_a_string()","aboutclasses#test_you_can_politely_ask_for_instance_variable_values()","aboutscope#test_you_can_reference_nested_classes_using_the_scope_operator()","aboutclasses#test_you_can_rip_the_value_out_using_instance_eval()","aboutdiceproject#test_you_can_roll_different_numbers_of_dice()","aboutnil#test_you_dont_get_null_pointer_errors_when_calling_methods_on_nil()","edgecase::koan::testmethods()","edgecase::koan::tests_disabled?()","aboutclasses::dog7#to_s()","abouttostr::canbetreatedasstring#to_s()","abouttostr::cannotbetreatedasstring#to_s()","abouttostr::canbetreatedasstring#to_str()","edgecase::koan::total_tests()","object#triangle()","abouttrueandfalse#truth_value()","edgecase::color#use_colors?()","edgecase::color#using_win32console()","edgecase::color#using_windows?()","aboutclassmethods::dog2#wag()","aboutclassmethods::dog2::wag()","aboutinheritance::chihuahua#wag()","aboutopenclasses::dog#wag()","edgecase::thepath#walk()","aboutblocks#yield_tester()","","",""],"info":[["AboutArrayAssignment","","AboutArrayAssignment.html","",""],["AboutArrays","","AboutArrays.html","",""],["AboutAsserts","","AboutAsserts.html","",""],["AboutBlocks","","AboutBlocks.html","",""],["AboutClassMethods","","AboutClassMethods.html","",""],["AboutClassMethods::Dog","","AboutClassMethods/Dog.html","",""],["AboutClassMethods::Dog2","","AboutClassMethods/Dog2.html","",""],["AboutClassMethods::LastExpressionInClassStatement","","AboutClassMethods/Dog.html","",""],["AboutClasses","","AboutClasses.html","",""],["AboutClasses::Dog","","AboutClasses/Dog.html","",""],["AboutClasses::Dog2","","AboutClasses/Dog2.html","",""],["AboutClasses::Dog3","","AboutClasses/Dog3.html","",""],["AboutClasses::Dog4","","AboutClasses/Dog4.html","",""],["AboutClasses::Dog5","","AboutClasses/Dog5.html","",""],["AboutClasses::Dog6","","AboutClasses/Dog6.html","",""],["AboutClasses::Dog7","","AboutClasses/Dog7.html","",""],["AboutConstants","","AboutConstants.html","",""],["AboutConstants::Animal","","AboutConstants/Animal.html","",""],["AboutConstants::Animal::NestedAnimal","","AboutConstants/Animal/NestedAnimal.html","",""],["AboutConstants::MyAnimals","","AboutConstants/MyAnimals.html","",""],["AboutConstants::MyAnimals::Bird","","AboutConstants/MyAnimals/Bird.html","",""],["AboutConstants::MyAnimals::Oyster","","AboutConstants/MyAnimals/Oyster.html","",""],["AboutConstants::Reptile","","AboutConstants/Reptile.html","",""],["AboutControlStatements","","AboutControlStatements.html","",""],["AboutDiceProject","","AboutDiceProject.html","","<p>Implement a DiceSet Class here:\n<p>class DiceSet\n\n<pre>code ...</pre>\n"],["AboutExceptions","","AboutExceptions.html","",""],["AboutExceptions::MySpecialError","","AboutExceptions/MySpecialError.html","",""],["AboutHashes","","AboutHashes.html","",""],["AboutInheritance","","AboutInheritance.html","",""],["AboutInheritance::BullDog","","AboutInheritance/BullDog.html","",""],["AboutInheritance::Chihuahua","","AboutInheritance/Chihuahua.html","",""],["AboutInheritance::Dog","","AboutInheritance/Dog.html","",""],["AboutInheritance::GreatDane","","AboutInheritance/GreatDane.html","",""],["AboutIteration","","AboutIteration.html","",""],["AboutJavaInterop","","AboutJavaInterop.html","","<p>Concepts\n<p>Pull in a java class\n<p>calling a method, Camel vs snake\n"],["AboutJavaInterop::Java","","AboutJavaInterop/Java.html","",""],["AboutJavaInterop::Java::JavaUtil","","AboutJavaInterop/Java/JavaUtil.html","",""],["AboutJavaInterop::Java::JavaUtil::ArrayList","","AboutJavaInterop/Java/JavaUtil/ArrayList.html","","<p>Open the Java ArrayList class and add a new method.\n"],["AboutMessagePassing","","AboutMessagePassing.html","",""],["AboutMessagePassing::AllMessageCatcher","","AboutMessagePassing/AllMessageCatcher.html","",""],["AboutMessagePassing::MessageCatcher","","AboutMessagePassing/MessageCatcher.html","",""],["AboutMessagePassing::TypicalObject","","AboutMessagePassing/TypicalObject.html","",""],["AboutMessagePassing::WellBehavedFooCatcher","","AboutMessagePassing/WellBehavedFooCatcher.html","","<p>(note: just reopening class from above)\n"],["AboutMethods","","AboutMethods.html","",""],["AboutMethods::Dog","","AboutMethods/Dog.html","",""],["AboutModules","","AboutModules.html","",""],["AboutModules::Dog","","AboutModules/Dog.html","",""],["AboutModules::Nameable","","AboutModules/Nameable.html","",""],["AboutNil","","AboutNil.html","",""],["AboutObjects","","AboutObjects.html","",""],["AboutOpenClasses","","AboutOpenClasses.html","",""],["AboutOpenClasses::Dog","","AboutOpenClasses/Dog.html","","<p>Open the existing Dog class and add a new method.\n"],["AboutProxyObjectProject","","AboutProxyObjectProject.html","","<p>The proxy object should pass the following Koan:\n"],["AboutRegularExpressions","","AboutRegularExpressions.html","",""],["AboutSandwichCode","","AboutSandwichCode.html","",""],["AboutScope","","AboutScope.html","",""],["AboutScope::Jims","","AboutScope/Jims.html","",""],["AboutScope::Jims::Dog","","AboutScope/Jims/Dog.html","",""],["AboutScope::Joes","","AboutScope/Joes.html","",""],["AboutScope::Joes::Dog","","AboutScope/Joes/Dog.html","",""],["AboutScope::String","","AboutScope/String.html","",""],["AboutScoringProject","","AboutScoringProject.html","",""],["AboutStrings","","AboutStrings.html","",""],["AboutSymbols","","AboutSymbols.html","",""],["AboutToStr","","AboutToStr.html","",""],["AboutToStr::CanBeTreatedAsString","","AboutToStr/CanBeTreatedAsString.html","",""],["AboutToStr::CanNotBeTreatedAsString","","AboutToStr/CanNotBeTreatedAsString.html","",""],["AboutTriangleProject","","AboutTriangleProject.html","",""],["AboutTriangleProject2","","AboutTriangleProject2.html","",""],["AboutTrueAndFalse","","AboutTrueAndFalse.html","",""],["ArrayTest","","ArrayTest.html","",""],["Autotest","","Autotest.html","",""],["Autotest::Rubykoan","","Autotest/Rubykoan.html","",""],["EdgeCase","","EdgeCase.html","",""],["EdgeCase::Color","","EdgeCase/Color.html","",""],["EdgeCase::Koan","","EdgeCase/Koan.html","",""],["EdgeCase::Sensei","","EdgeCase/Sensei.html","",""],["EdgeCase::ThePath","","EdgeCase/ThePath.html","",""],["FillMeInError","","FillMeInError.html","","<p>Support code for the Ruby Koans.\n"],["Integer","","Integer.html","",""],["KeyError","","KeyError.html","",""],["Object","","Object.html","","<p>Method name replacement.\n"],["Proxy","","Proxy.html","","<p>Project: Create a Proxy Class\n<p>In this assignment, create a proxy class (one is started for you below).\n…\n"],["String","","String.html","",""],["Television","","Television.html","","<p>Example class using in the proxy testing above.\n"],["TelevisionTest","","TelevisionTest.html","","<p>Tests for the Television class.  All of theses tests should pass.\n"],["TestSomething","","TestSomething.html","",""],["TriangleError","","TriangleError.html","","<p>Error class used in part 2.  No need to change this code.\n"],["__","Object","Object.html#method-i-__","(value=\"FILL ME IN\", value19=:mu)","<p>Standard, generic replacement value. If value19 is given, it is used in\nplace of value for Ruby 1.9. …\n"],["___","Object","Object.html#method-i-___","(value=FillMeInError, value19=:mu)","<p>Error object replacement value.\n"],["____","Object","Object.html#method-i-____","(method=nil)",""],["_n_","Object","Object.html#method-i-_n_","(value=999999, value19=:mu)","<p>Numeric replacement value.\n"],["a_class_method","AboutClassMethods::Dog","AboutClassMethods/Dog.html#method-c-a_class_method","()",""],["a_class_method","AboutClassMethods::Dog","AboutClassMethods/Dog.html#method-c-a_class_method","()",""],["a_zenlike_statement","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-a_zenlike_statement","()","<p>Hat’s tip to Ara T. Howard for the zen statements from his metakoans Ruby\nQuiz (rubyquiz.com/quiz67.html …\n"],["acts_like_a_string?","AboutToStr","AboutToStr.html#method-i-acts_like_a_string-3F","(string)",""],["add_a_payload","AboutMessagePassing::MessageCatcher","AboutMessagePassing/MessageCatcher.html#method-i-add_a_payload","(*args)",""],["add_progress","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-add_progress","(prog)",""],["artistic_end_screen","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-artistic_end_screen","()",""],["as_name","AboutIteration","AboutIteration.html#method-i-as_name","(name)",""],["assert_failed?","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-assert_failed-3F","()",""],["bark","AboutInheritance::BullDog","AboutInheritance/BullDog.html#method-i-bark","()",""],["bark","AboutInheritance::Chihuahua","AboutInheritance/Chihuahua.html#method-i-bark","()",""],["bark","AboutInheritance::Dog","AboutInheritance/Dog.html#method-i-bark","()",""],["bark","AboutModules::Dog","AboutModules/Dog.html#method-i-bark","()",""],["bark","AboutOpenClasses::Dog","AboutOpenClasses/Dog.html#method-i-bark","()",""],["boring_end_screen","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-boring_end_screen","()",""],["caught?","AboutMessagePassing::MessageCatcher","AboutMessagePassing/MessageCatcher.html#method-i-caught-3F","()",""],["color","EdgeCase::Color","EdgeCase/Color.html#method-i-color","(color_value)",""],["colorize","EdgeCase::Color","EdgeCase/Color.html#method-i-colorize","(string, color_value)",""],["command_line","EdgeCase::Koan","EdgeCase/Koan.html#method-c-command_line","(args)",""],["count_lines","AboutSandwichCode","AboutSandwichCode.html#method-i-count_lines","(file_name)",""],["count_lines2","AboutSandwichCode","AboutSandwichCode.html#method-i-count_lines2","(file_name)","<p>Now we write:\n"],["count_lines3","AboutSandwichCode","AboutSandwichCode.html#method-i-count_lines3","(file_name)",""],["each_step","EdgeCase::ThePath","EdgeCase/ThePath.html#method-i-each_step","()",""],["embolden_first_line_only","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-embolden_first_line_only","(text)",""],["encourage","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-encourage","()",""],["end_of_enlightenment","EdgeCase::Koan","EdgeCase/Koan.html#method-c-end_of_enlightenment","()",""],["end_screen","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-end_screen","()",""],["even?","Integer","Integer.html#method-i-even-3F","()",""],["failed","EdgeCase::Koan","EdgeCase/Koan.html#method-i-failed","(failure)",""],["failed?","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-failed-3F","()",""],["file_sandwich","AboutSandwichCode","AboutSandwichCode.html#method-i-file_sandwich","(file_name)","<p>THINK ABOUT IT:\n<p>The count_lines and find_line are similar, and yet different. They both\nfollow the pattern …\n"],["find_interesting_lines","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-find_interesting_lines","(backtrace)",""],["find_line","AboutSandwichCode","AboutSandwichCode.html#method-i-find_line","(file_name)",""],["find_line2","AboutSandwichCode","AboutSandwichCode.html#method-i-find_line2","(file_name)",""],["get_self","AboutClasses::Dog7","AboutClasses/Dog7.html#method-i-get_self","()",""],["growl","AboutInheritance::GreatDane","AboutInheritance/GreatDane.html#method-i-growl","()",""],["guide_through_error","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-guide_through_error","()",""],["handle_results","Autotest::Rubykoan","Autotest/Rubykoan.html#method-i-handle_results","(results)","<p>quiet test/unit chatter\n"],["here","AboutModules::Dog","AboutModules/Dog.html#method-i-here","()",""],["here","AboutModules::Nameable","AboutModules/Nameable.html#method-i-here","()",""],["identify","AboutScope::Jims::Dog","AboutScope/Jims/Dog.html#method-i-identify","()",""],["identify","AboutScope::Joes::Dog","AboutScope/Joes/Dog.html#method-i-identify","()",""],["in_ruby_version","Object","Object.html#method-i-in_ruby_version","(*versions)",""],["indent","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-indent","(text)",""],["inherited","EdgeCase::Koan","EdgeCase/Koan.html#method-c-inherited","(subclass)",""],["inspect","AboutClasses::Dog7","AboutClasses/Dog7.html#method-i-inspect","()",""],["instruct","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-instruct","()",""],["legs_in_animal","AboutConstants::Animal","AboutConstants/Animal.html#method-i-legs_in_animal","()",""],["legs_in_bird","AboutConstants::MyAnimals::Bird","AboutConstants/MyAnimals/Bird.html#method-i-legs_in_bird","()",""],["legs_in_nested_animal","AboutConstants::Animal::NestedAnimal","AboutConstants/Animal/NestedAnimal.html#method-i-legs_in_nested_animal","()",""],["legs_in_oyster","AboutConstants::MyAnimals::Oyster","AboutConstants/MyAnimals/Oyster.html#method-i-legs_in_oyster","()",""],["legs_in_reptile","AboutConstants::Reptile","AboutConstants/Reptile.html#method-i-legs_in_reptile","()",""],["make_test_cmd","Autotest::Rubykoan","Autotest/Rubykoan.html#method-i-make_test_cmd","(files_to_test)",""],["many_yields","AboutBlocks","AboutBlocks.html#method-i-many_yields","()",""],["meditate","EdgeCase::Koan","EdgeCase/Koan.html#method-i-meditate","()",""],["method_added","EdgeCase::Koan","EdgeCase/Koan.html#method-c-method_added","(name)",""],["method_missing","AboutMessagePassing::AllMessageCatcher","AboutMessagePassing/AllMessageCatcher.html#method-i-method_missing","(method_name, *args, &block)",""],["method_missing","AboutMessagePassing::WellBehavedFooCatcher","AboutMessagePassing/WellBehavedFooCatcher.html#method-i-method_missing","(method_name, *args, &block)",""],["method_with_block","AboutBlocks","AboutBlocks.html#method-i-method_with_block","()",""],["method_with_block_arguments","AboutBlocks","AboutBlocks.html#method-i-method_with_block_arguments","()",""],["method_with_defaults","AboutMethods","AboutMethods.html#method-i-method_with_defaults","(a, b=:default_value)",""],["method_with_explicit_block","AboutBlocks","AboutBlocks.html#method-i-method_with_explicit_block","(&block)",""],["method_with_explicit_return","AboutMethods","AboutMethods.html#method-i-method_with_explicit_return","()",""],["method_with_var_args","AboutMethods","AboutMethods.html#method-i-method_with_var_args","(*args)",""],["method_without_explicit_return","AboutMethods","AboutMethods.html#method-i-method_without_explicit_return","()",""],["multiply_all","AboutJavaInterop::Java::JavaUtil::ArrayList","AboutJavaInterop/Java/JavaUtil/ArrayList.html#method-i-multiply_all","()",""],["my_global_method","Object","Object.html#method-i-my_global_method","(a,b)",""],["my_method_in_the_same_class","AboutMethods","AboutMethods.html#method-i-my_method_in_the_same_class","(a, b)",""],["name","AboutClassMethods::Dog","AboutClassMethods/Dog.html#method-c-name","()",""],["name","AboutClassMethods::Dog","AboutClassMethods/Dog.html#method-c-name","()",""],["name","AboutClasses::Dog3","AboutClasses/Dog3.html#method-i-name","()",""],["name","AboutMethods::Dog","AboutMethods/Dog.html#method-i-name","()",""],["new","AboutClasses::Dog6","AboutClasses/Dog6.html#method-c-new","(initial_name)",""],["new","AboutClasses::Dog7","AboutClasses/Dog7.html#method-c-new","(initial_name)",""],["new","AboutInheritance::Dog","AboutInheritance/Dog.html#method-c-new","(name)",""],["new","AboutModules::Dog","AboutModules/Dog.html#method-c-new","()",""],["new","Autotest::Rubykoan","Autotest/Rubykoan.html#method-c-new","()",""],["new","EdgeCase::Koan","EdgeCase/Koan.html#method-c-new","(name, koan_file=nil, koan_count=0, step_count=0)",""],["new","EdgeCase::Sensei","EdgeCase/Sensei.html#method-c-new","()",""],["new","Proxy","Proxy.html#method-c-new","(target_object)",""],["observe","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-observe","(step)",""],["on?","Television","Television.html#method-i-on-3F","()",""],["passed?","EdgeCase::Koan","EdgeCase/Koan.html#method-i-passed-3F","()",""],["power","Television","Television.html#method-i-power","()",""],["progress","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-progress","()",""],["respond_to?","AboutMessagePassing::WellBehavedFooCatcher","AboutMessagePassing/WellBehavedFooCatcher.html#method-i-respond_to-3F","(method_name)",""],["ruby_version?","Object","Object.html#method-i-ruby_version-3F","(version)",""],["score","Object","Object.html#method-i-score","(dice)","<p>Greed is a dice game where you roll up to five dice to accumulate points. \nThe following “score” …\n"],["set_name","AboutClasses::Dog2","AboutClasses/Dog2.html#method-i-set_name","(a_name)",""],["set_name","AboutClasses::Dog3","AboutClasses/Dog3.html#method-i-set_name","(a_name)",""],["set_name","AboutClasses::Dog4","AboutClasses/Dog4.html#method-i-set_name","(a_name)",""],["set_name","AboutModules::Nameable","AboutModules/Nameable.html#method-i-set_name","(new_name)",""],["setup","EdgeCase::Koan","EdgeCase/Koan.html#method-i-setup","()",""],["show_progress","EdgeCase::Sensei","EdgeCase/Sensei.html#method-i-show_progress","()",""],["side_padding","String","String.html#method-i-side_padding","(width)",""],["simple_output","EdgeCase","EdgeCase.html#method-c-simple_output","()",""],["subclasses","EdgeCase::Koan","EdgeCase/Koan.html#method-c-subclasses","()","<p>Lazy initialize list of subclasses\n"],["teardown","EdgeCase::Koan","EdgeCase/Koan.html#method-i-teardown","()",""],["test_a_better_way_of_asserting_equality","AboutAsserts","AboutAsserts.html#method-i-test_a_better_way_of_asserting_equality","()","<p>Some ways of asserting equality are better than others.\n"],["test_a_character_class_can_be_negated","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_a_character_class_can_be_negated","()",""],["test_a_failed_match_returns_nil","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_a_failed_match_returns_nil","()",""],["test_a_pattern_is_a_regular_expression","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_a_pattern_is_a_regular_expression","()",""],["test_a_regexp_can_search_a_string_for_matching_content","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_a_regexp_can_search_a_string_for_matching_content","()",""],["test_a_vertical_pipe_means_or","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_a_vertical_pipe_means_or","()",""],["test_accessing_array_elements","AboutArrays","AboutArrays.html#method-i-test_accessing_array_elements","()",""],["test_accessing_hashes","AboutHashes","AboutHashes.html#method-i-test_accessing_hashes","()",""],["test_accessing_hashes_with_fetch","AboutHashes","AboutHashes.html#method-i-test_accessing_hashes_with_fetch","()",""],["test_adding_to_an_array_with_push","ArrayTest","ArrayTest.html#method-i-test_adding_to_an_array_with_push","()",""],["test_adding_to_an_array_with_shovel_shovel","ArrayTest","ArrayTest.html#method-i-test_adding_to_an_array_with_shovel_shovel","()",""],["test_adding_to_an_array_with_unshift","ArrayTest","ArrayTest.html#method-i-test_adding_to_an_array_with_unshift","()",""],["test_after_reopening_dogs_can_both_wag_and_bark","AboutOpenClasses","AboutOpenClasses.html#method-i-test_after_reopening_dogs_can_both_wag_and_bark","()",""],["test_all_classes_ultimately_inherit_from_object","AboutInheritance","AboutInheritance.html#method-i-test_all_classes_ultimately_inherit_from_object","()",""],["test_all_iteration_methods_work_on_any_collection_not_just_arrays","AboutIteration","AboutIteration.html#method-i-test_all_iteration_methods_work_on_any_collection_not_just_arrays","()",""],["test_all_messages_are_caught","AboutMessagePassing","AboutMessagePassing.html#method-i-test_all_messages_are_caught","()",""],["test_all_objects_support_to_s_and_inspect","AboutClasses","AboutClasses.html#method-i-test_all_objects_support_to_s_and_inspect","()",""],["test_also_java_class_can_be_given_ruby_aliases","AboutJavaInterop","AboutJavaInterop.html#method-i-test_also_java_class_can_be_given_ruby_aliases","()",""],["test_any_ruby_expression_may_be_interpolated","AboutStrings","AboutStrings.html#method-i-test_any_ruby_expression_may_be_interpolated","()",""],["test_args_to_new_must_match_initialize","AboutClasses","AboutClasses.html#method-i-test_args_to_new_must_match_initialize","()",""],["test_array_access","ArrayTest","ArrayTest.html#method-i-test_array_access","()",""],["test_array_literals","AboutArrays","AboutArrays.html#method-i-test_array_literals","()",""],["test_arrays_and_ranges","AboutArrays","AboutArrays.html#method-i-test_arrays_and_ranges","()",""],["test_arrays_with_other_objects","ArrayTest","ArrayTest.html#method-i-test_arrays_with_other_objects","()",""],["test_as_defined_dogs_do_bark","AboutOpenClasses","AboutOpenClasses.html#method-i-test_as_defined_dogs_do_bark","()",""],["test_assert","TestSomething","TestSomething.html#method-i-test_assert","()",""],["test_assert_equality","AboutAsserts","AboutAsserts.html#method-i-test_assert_equality","()","<p>To understand reality, we must compare our expectations against reality.\n"],["test_assert_truth","AboutAsserts","AboutAsserts.html#method-i-test_assert_truth","()","<p>We shall contemplate truth by testing reality, via asserts.\n"],["test_assert_with_message","AboutAsserts","AboutAsserts.html#method-i-test_assert_with_message","()","<p>Enlightenment may be more easily achieved with appropriate messages.\n"],["test_asserting_an_error_is_raised","AboutExceptions","AboutExceptions.html#method-i-test_asserting_an_error_is_raised","()","<p>Sometimes, we must know about the unknown\n"],["test_asterisk_means_zero_or_more","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_asterisk_means_zero_or_more","()",""],["test_attr_accessor_will_automatically_define_both_read_and_write_accessors","AboutClasses","AboutClasses.html#method-i-test_attr_accessor_will_automatically_define_both_read_and_write_accessors","()",""],["test_attr_reader_will_automatically_define_an_accessor","AboutClasses","AboutClasses.html#method-i-test_attr_reader_will_automatically_define_an_accessor","()",""],["test_bare_bones_class_names_assume_the_current_scope","AboutScope","AboutScope.html#method-i-test_bare_bones_class_names_assume_the_current_scope","()",""],["test_basic_arrays","ArrayTest","ArrayTest.html#method-i-test_basic_arrays","()",""],["test_block_can_affect_variables_in_the_code_where_they_are_created","AboutBlocks","AboutBlocks.html#method-i-test_block_can_affect_variables_in_the_code_where_they_are_created","()",""],["test_blocks_can_be_assigned_to_variables_and_called_explicitly","AboutBlocks","AboutBlocks.html#method-i-test_blocks_can_be_assigned_to_variables_and_called_explicitly","()",""],["test_blocks_can_be_defined_with_do_end_too","AboutBlocks","AboutBlocks.html#method-i-test_blocks_can_be_defined_with_do_end_too","()",""],["test_blocks_can_take_arguments","AboutBlocks","AboutBlocks.html#method-i-test_blocks_can_take_arguments","()",""],["test_break_statement","AboutControlStatements","AboutControlStatements.html#method-i-test_break_statement","()",""],["test_break_statement_returns_values","AboutControlStatements","AboutControlStatements.html#method-i-test_break_statement_returns_values","()",""],["test_break_works_with_each_style_iterations","AboutIteration","AboutIteration.html#method-i-test_break_works_with_each_style_iterations","()",""],["test_calling_global_methods","AboutMethods","AboutMethods.html#method-i-test_calling_global_methods","()",""],["test_calling_global_methods_with_wrong_number_of_arguments","AboutMethods","AboutMethods.html#method-i-test_calling_global_methods_with_wrong_number_of_arguments","()","<p>NOTE: wrong number of argument is not a SYNTAX error, but a runtime error.\n"],["test_calling_global_methods_without_parentheses","AboutMethods","AboutMethods.html#method-i-test_calling_global_methods_without_parentheses","()",""],["test_calling_method_missing_causes_the_no_method_error","AboutMessagePassing","AboutMessagePassing.html#method-i-test_calling_method_missing_causes_the_no_method_error","()",""],["test_calling_methods_in_other_objects_require_explicit_receiver","AboutMethods","AboutMethods.html#method-i-test_calling_methods_in_other_objects_require_explicit_receiver","()",""],["test_calling_methods_in_same_class","AboutMethods","AboutMethods.html#method-i-test_calling_methods_in_same_class","()",""],["test_calling_methods_in_same_class_with_explicit_receiver","AboutMethods","AboutMethods.html#method-i-test_calling_methods_in_same_class_with_explicit_receiver","()",""],["test_calling_private_methods_in_other_objects","AboutMethods","AboutMethods.html#method-i-test_calling_private_methods_in_other_objects","()",""],["test_calling_private_methods_with_an_explicit_receiver","AboutMethods","AboutMethods.html#method-i-test_calling_private_methods_with_an_explicit_receiver","()",""],["test_calling_private_methods_without_receiver","AboutMethods","AboutMethods.html#method-i-test_calling_private_methods_without_receiver","()",""],["test_calling_with_default_values","AboutMethods","AboutMethods.html#method-i-test_calling_with_default_values","()",""],["test_calling_with_variable_arguments","AboutMethods","AboutMethods.html#method-i-test_calling_with_variable_arguments","()",""],["test_can_create_a_dice_set","AboutDiceProject","AboutDiceProject.html#method-i-test_can_create_a_dice_set","()",""],["test_can_directly_call_java_methods_on_java_objects","AboutJavaInterop","AboutJavaInterop.html#method-i-test_can_directly_call_java_methods_on_java_objects","()",""],["test_can_set_the_channel","TelevisionTest","TelevisionTest.html#method-i-test_can_set_the_channel","()",""],["test_cant_instantiate_modules","AboutModules","AboutModules.html#method-i-test_cant_instantiate_modules","()",""],["test_caret_anchors_to_the_start_of_lines","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_caret_anchors_to_the_start_of_lines","()",""],["test_catching_messages_makes_respond_to_lie","AboutMessagePassing","AboutMessagePassing.html#method-i-test_catching_messages_makes_respond_to_lie","()",""],["test_changing_hashes","AboutHashes","AboutHashes.html#method-i-test_changing_hashes","()",""],["test_character_classes_can_include_ranges","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_character_classes_can_include_ranges","()",""],["test_character_classes_give_options_for_a_character","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_character_classes_give_options_for_a_character","()",""],["test_class_methods_are_independent_of_instance_methods","AboutClassMethods","AboutClassMethods.html#method-i-test_class_methods_are_independent_of_instance_methods","()",""],["test_class_names_are_just_constants","AboutScope","AboutScope.html#method-i-test_class_names_are_just_constants","()",""],["test_class_statements_return_the_value_of_their_last_expression","Object","Object.html#method-i-test_class_statements_return_the_value_of_their_last_expression","()",""],["test_classes_and_instances_do_not_share_instance_variables","AboutClassMethods","AboutClassMethods.html#method-i-test_classes_and_instances_do_not_share_instance_variables","()",""],["test_classes_are_classes","AboutClassMethods","AboutClassMethods.html#method-i-test_classes_are_classes","()",""],["test_classes_are_objects_too","AboutClassMethods","AboutClassMethods.html#method-i-test_classes_are_objects_too","()",""],["test_classes_can_be_asked_if_they_know_how_to_respond","AboutMessagePassing","AboutMessagePassing.html#method-i-test_classes_can_be_asked_if_they_know_how_to_respond","()",""],["test_classes_can_override_module_methods","AboutModules","AboutModules.html#method-i-test_classes_can_override_module_methods","()",""],["test_classes_have_methods","AboutClassMethods","AboutClassMethods.html#method-i-test_classes_have_methods","()",""],["test_clone_creates_a_different_object","AboutObjects","AboutObjects.html#method-i-test_clone_creates_a_different_object","()",""],["test_collect_transforms_elements_of_an_array","AboutIteration","AboutIteration.html#method-i-test_collect_transforms_elements_of_an_array","()",""],["test_combining_hashes","AboutHashes","AboutHashes.html#method-i-test_combining_hashes","()",""],["test_condition_operators","AboutControlStatements","AboutControlStatements.html#method-i-test_condition_operators","()",""],["test_constants_are_defined_with_an_initial_uppercase_letter","AboutScope","AboutScope.html#method-i-test_constants_are_defined_with_an_initial_uppercase_letter","()",""],["test_constants_become_symbols","AboutSymbols","AboutSymbols.html#method-i-test_constants_become_symbols","()",""],["test_constants_can_be_looked_up_explicitly","AboutScope","AboutScope.html#method-i-test_constants_can_be_looked_up_explicitly","()",""],["test_counting_lines","AboutSandwichCode","AboutSandwichCode.html#method-i-test_counting_lines","()",""],["test_counting_lines2","AboutSandwichCode","AboutSandwichCode.html#method-i-test_counting_lines2","()",""],["test_creating_arrays","AboutArrays","AboutArrays.html#method-i-test_creating_arrays","()",""],["test_creating_hashes","AboutHashes","AboutHashes.html#method-i-test_creating_hashes","()",""],["test_default_value","AboutHashes","AboutHashes.html#method-i-test_default_value","()",""],["test_default_value_is_the_same_object","AboutHashes","AboutHashes.html#method-i-test_default_value_is_the_same_object","()",""],["test_default_value_with_block","AboutHashes","AboutHashes.html#method-i-test_default_value_with_block","()",""],["test_dice_values_do_not_change_unless_explicitly_rolled","AboutDiceProject","AboutDiceProject.html#method-i-test_dice_values_do_not_change_unless_explicitly_rolled","()",""],["test_dice_values_should_change_between_rolls","AboutDiceProject","AboutDiceProject.html#method-i-test_dice_values_should_change_between_rolls","()",""],["test_different_objects_have_different_instance_variables","AboutClasses","AboutClasses.html#method-i-test_different_objects_have_different_instance_variables","()",""],["test_dog_is_not_available_in_the_current_scope","AboutScope","AboutScope.html#method-i-test_dog_is_not_available_in_the_current_scope","()",""],["test_dollar_sign_anchors_to_the_end_of_lines","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_dollar_sign_anchors_to_the_end_of_lines","()",""],["test_double_quoted_string_interpret_escape_characters","AboutStrings","AboutStrings.html#method-i-test_double_quoted_string_interpret_escape_characters","()",""],["test_double_quoted_strings_are_strings","AboutStrings","AboutStrings.html#method-i-test_double_quoted_strings_are_strings","()",""],["test_double_quoted_strings_interpolate_variables","AboutStrings","AboutStrings.html#method-i-test_double_quoted_strings_interpolate_variables","()",""],["test_each_can_use_curly_brace_blocks_too","AboutIteration","AboutIteration.html#method-i-test_each_can_use_curly_brace_blocks_too","()",""],["test_each_is_a_method_on_arrays","AboutIteration","AboutIteration.html#method-i-test_each_is_a_method_on_arrays","()","<p>Ok, now back to the Koans.\n"],["test_edge_case_on_off","TelevisionTest","TelevisionTest.html#method-i-test_edge_case_on_off","()",""],["test_ensure_clause","AboutExceptions","AboutExceptions.html#method-i-test_ensure_clause","()",""],["test_equilateral_triangles_have_equal_sides","AboutTriangleProject","AboutTriangleProject.html#method-i-test_equilateral_triangles_have_equal_sides","()",""],["test_even_existing_built_in_classes_can_be_reopened","AboutOpenClasses","AboutOpenClasses.html#method-i-test_even_existing_built_in_classes_can_be_reopened","()",""],["test_every_object_has_an_id","AboutObjects","AboutObjects.html#method-i-test_every_object_has_an_id","()",""],["test_every_object_has_different_id","AboutObjects","AboutObjects.html#method-i-test_every_object_has_different_id","()",""],["test_everything_else_is_treated_as_true","AboutTrueAndFalse","AboutTrueAndFalse.html#method-i-test_everything_else_is_treated_as_true","()",""],["test_everything_is_an_object","AboutObjects","AboutObjects.html#method-i-test_everything_is_an_object","()",""],["test_exceptions_inherit_from_Exception","AboutExceptions","AboutExceptions.html#method-i-test_exceptions_inherit_from_Exception","()",""],["test_explicitly_implementing_respond_to_lets_objects_tell_the_truth","AboutMessagePassing","AboutMessagePassing.html#method-i-test_explicitly_implementing_respond_to_lets_objects_tell_the_truth","()",""],["test_false_is_treated_as_false","AboutTrueAndFalse","AboutTrueAndFalse.html#method-i-test_false_is_treated_as_false","()",""],["test_fill_in_values","AboutAsserts","AboutAsserts.html#method-i-test_fill_in_values","()","<p>Sometimes we will ask you to fill in the values\n"],["test_find_locates_the_first_element_matching_a_criteria","AboutIteration","AboutIteration.html#method-i-test_find_locates_the_first_element_matching_a_criteria","()",""],["test_finding_lines","AboutSandwichCode","AboutSandwichCode.html#method-i-test_finding_lines","()",""],["test_finding_lines2","AboutSandwichCode","AboutSandwichCode.html#method-i-test_finding_lines2","()",""],["test_flexible_quotes_can_handle_multiple_lines","AboutStrings","AboutStrings.html#method-i-test_flexible_quotes_can_handle_multiple_lines","()",""],["test_foo_method_are_caught","AboutMessagePassing","AboutMessagePassing.html#method-i-test_foo_method_are_caught","()",""],["test_for_statement","AboutControlStatements","AboutControlStatements.html#method-i-test_for_statement","()",""],["test_gsub_is_like_find_and_replace_all","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_gsub_is_like_find_and_replace_all","()",""],["test_hash_is_unordered","AboutHashes","AboutHashes.html#method-i-test_hash_is_unordered","()",""],["test_hash_keys","AboutHashes","AboutHashes.html#method-i-test_hash_keys","()",""],["test_hash_literals","AboutHashes","AboutHashes.html#method-i-test_hash_literals","()",""],["test_hash_values","AboutHashes","AboutHashes.html#method-i-test_hash_values","()",""],["test_here_documents_can_also_handle_multiple_lines","AboutStrings","AboutStrings.html#method-i-test_here_documents_can_also_handle_multiple_lines","()",""],["test_however_most_methods_returning_strings_return_ruby_strings","AboutJavaInterop","AboutJavaInterop.html#method-i-test_however_most_methods_returning_strings_return_ruby_strings","()",""],["test_identical_symbols_are_a_single_internal_object","AboutSymbols","AboutSymbols.html#method-i-test_identical_symbols_are_a_single_internal_object","()",""],["test_if_statement_modifiers","AboutControlStatements","AboutControlStatements.html#method-i-test_if_statement_modifiers","()",""],["test_if_statements_return_values","AboutControlStatements","AboutControlStatements.html#method-i-test_if_statements_return_values","()",""],["test_if_statements_with_no_else_with_false_condition_return_value","AboutControlStatements","AboutControlStatements.html#method-i-test_if_statements_with_no_else_with_false_condition_return_value","()",""],["test_if_then_else_statements","AboutControlStatements","AboutControlStatements.html#method-i-test_if_then_else_statements","()",""],["test_if_then_statements","AboutControlStatements","AboutControlStatements.html#method-i-test_if_then_statements","()",""],["test_illegal_triangles_throw_exceptions","AboutTriangleProject2","AboutTriangleProject2.html#method-i-test_illegal_triangles_throw_exceptions","()","<p>The first assignment did not talk about how to handle errors. Let’s\nhandle that part now.\n"],["test_in_ruby_1_8_single_characters_are_represented_by_integers","AboutStrings","AboutStrings.html#method-i-test_in_ruby_1_8_single_characters_are_represented_by_integers","()",""],["test_in_ruby_1_9_single_characters_are_represented_by_strings","AboutStrings","AboutStrings.html#method-i-test_in_ruby_1_9_single_characters_are_represented_by_strings","()",""],["test_include_class_includes_class_in_module_scope","AboutJavaInterop","AboutJavaInterop.html#method-i-test_include_class_includes_class_in_module_scope","()",""],["test_initialize_provides_initial_values_for_instance_variables","AboutClasses","AboutClasses.html#method-i-test_initialize_provides_initial_values_for_instance_variables","()",""],["test_inject_will_blow_your_mind","AboutIteration","AboutIteration.html#method-i-test_inject_will_blow_your_mind","()",""],["test_inside_a_method_self_refers_to_the_containing_object","AboutClasses","AboutClasses.html#method-i-test_inside_a_method_self_refers_to_the_containing_object","()",""],["test_inspect_provides_a_more_complete_string_version","AboutClasses","AboutClasses.html#method-i-test_inspect_provides_a_more_complete_string_version","()",""],["test_instance_variables_can_be_set_by_assigning_to_them","AboutClasses","AboutClasses.html#method-i-test_instance_variables_can_be_set_by_assigning_to_them","()",""],["test_instance_variables_cannot_be_accessed_outside_the_class","AboutClasses","AboutClasses.html#method-i-test_instance_variables_cannot_be_accessed_outside_the_class","()",""],["test_instances_of_classes_can_be_created_with_new","AboutClasses","AboutClasses.html#method-i-test_instances_of_classes_can_be_created_with_new","()",""],["test_isosceles_triangles_have_exactly_two_sides_equal","AboutTriangleProject","AboutTriangleProject.html#method-i-test_isosceles_triangles_have_exactly_two_sides_equal","()",""],["test_it_also_turns_off","TelevisionTest","TelevisionTest.html#method-i-test_it_also_turns_off","()",""],["test_it_turns_on","TelevisionTest","TelevisionTest.html#method-i-test_it_turns_on","()",""],["test_iterating_with_each","AboutIteration","AboutIteration.html#method-i-test_iterating_with_each","()",""],["test_java_class_are_open_from_ruby","AboutJavaInterop","AboutJavaInterop.html#method-i-test_java_class_are_open_from_ruby","()",""],["test_java_class_can_be_referenced_using_both_ruby_and_java_like_syntax","AboutJavaInterop","AboutJavaInterop.html#method-i-test_java_class_can_be_referenced_using_both_ruby_and_java_like_syntax","()",""],["test_java_collections_are_enumerable","AboutJavaInterop","AboutJavaInterop.html#method-i-test_java_collections_are_enumerable","()",""],["test_java_string_are_not_ruby_strings","AboutJavaInterop","AboutJavaInterop.html#method-i-test_java_string_are_not_ruby_strings","()",""],["test_java_strings_can_be_compared_to_ruby_strings_maybe","AboutJavaInterop","AboutJavaInterop.html#method-i-test_java_strings_can_be_compared_to_ruby_strings_maybe","()",""],["test_jruby_provides_question_mark_versions_of_boolean_methods","AboutJavaInterop","AboutJavaInterop.html#method-i-test_jruby_provides_question_mark_versions_of_boolean_methods","()",""],["test_jruby_provides_snake_case_versions_of_java_methods","AboutJavaInterop","AboutJavaInterop.html#method-i-test_jruby_provides_snake_case_versions_of_java_methods","()",""],["test_method_names_become_symbols","AboutSymbols","AboutSymbols.html#method-i-test_method_names_become_symbols","()",""],["test_method_with_explicit_return","AboutMethods","AboutMethods.html#method-i-test_method_with_explicit_return","()",""],["test_method_without_explicit_return","AboutMethods","AboutMethods.html#method-i-test_method_without_explicit_return","()",""],["test_methods_can_be_called_directly","AboutMessagePassing","AboutMessagePassing.html#method-i-test_methods_can_be_called_directly","()",""],["test_methods_can_be_invoked_by_sending_the_message","AboutMessagePassing","AboutMessagePassing.html#method-i-test_methods_can_be_invoked_by_sending_the_message","()",""],["test_methods_can_be_invoked_more_dynamically","AboutMessagePassing","AboutMessagePassing.html#method-i-test_methods_can_be_invoked_more_dynamically","()",""],["test_methods_can_call_yield_many_times","AboutBlocks","AboutBlocks.html#method-i-test_methods_can_call_yield_many_times","()",""],["test_methods_can_see_if_they_have_been_called_with_a_block","AboutBlocks","AboutBlocks.html#method-i-test_methods_can_see_if_they_have_been_called_with_a_block","()",""],["test_methods_can_take_an_explicit_block_argument","AboutBlocks","AboutBlocks.html#method-i-test_methods_can_take_an_explicit_block_argument","()",""],["test_methods_can_take_blocks","AboutBlocks","AboutBlocks.html#method-i-test_methods_can_take_blocks","()",""],["test_module_methods_are_also_available_in_the_object","AboutModules","AboutModules.html#method-i-test_module_methods_are_also_available_in_the_object","()",""],["test_module_methods_can_affect_instance_variables_in_the_object","AboutModules","AboutModules.html#method-i-test_module_methods_can_affect_instance_variables_in_the_object","()",""],["test_nested_classes_inherit_constants_from_enclosing_classes","AboutConstants","AboutConstants.html#method-i-test_nested_classes_inherit_constants_from_enclosing_classes","()",""],["test_nested_constants_are_referenced_by_their_complete_path","AboutConstants","AboutConstants.html#method-i-test_nested_constants_are_referenced_by_their_complete_path","()",""],["test_nested_constants_may_also_be_referenced_with_relative_paths","AboutConstants","AboutConstants.html#method-i-test_nested_constants_may_also_be_referenced_with_relative_paths","()",""],["test_nested_string_is_not_the_same_as_the_system_string","AboutScope","AboutScope.html#method-i-test_nested_string_is_not_the_same_as_the_system_string","()",""],["test_next_statement","AboutControlStatements","AboutControlStatements.html#method-i-test_next_statement","()",""],["test_nil_has_a_few_methods_defined_on_it","AboutNil","AboutNil.html#method-i-test_nil_has_a_few_methods_defined_on_it","()",""],["test_nil_is_an_object","AboutNil","AboutNil.html#method-i-test_nil_is_an_object","()",""],["test_nil_is_treated_as_false_too","AboutTrueAndFalse","AboutTrueAndFalse.html#method-i-test_nil_is_treated_as_false_too","()",""],["test_non_foo_messages_are_treated_normally","AboutMessagePassing","AboutMessagePassing.html#method-i-test_non_foo_messages_are_treated_normally","()",""],["test_non_parallel_assignment","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_non_parallel_assignment","()",""],["test_normal_methods_are_available_in_the_object","AboutModules","AboutModules.html#method-i-test_normal_methods_are_available_in_the_object","()",""],["test_normally_objects_cannot_be_used_where_strings_are_expected","AboutToStr","AboutToStr.html#method-i-test_normally_objects_cannot_be_used_where_strings_are_expected","()",""],["test_objects_are_objects","AboutClassMethods","AboutClassMethods.html#method-i-test_objects_are_objects","()",""],["test_objects_can_be_converted_to_strings","AboutObjects","AboutObjects.html#method-i-test_objects_can_be_converted_to_strings","()",""],["test_objects_can_be_inspected","AboutObjects","AboutObjects.html#method-i-test_objects_can_be_inspected","()",""],["test_objects_have_methods","AboutClassMethods","AboutClassMethods.html#method-i-test_objects_have_methods","()",""],["test_open_handles_the_file_sandwich_when_given_a_block","AboutSandwichCode","AboutSandwichCode.html#method-i-test_open_handles_the_file_sandwich_when_given_a_block","()",""],["test_other_objects_are_not_affected_by_these_singleton_methods","AboutClassMethods","AboutClassMethods.html#method-i-test_other_objects_are_not_affected_by_these_singleton_methods","()",""],["test_parallel_assignment_with_one_variable","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_parallel_assignment_with_one_variable","()",""],["test_parallel_assignments","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_parallel_assignments","()",""],["test_parallel_assignments_with_extra_values","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_parallel_assignments_with_extra_values","()",""],["test_parallel_assignments_with_splat_operator","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_parallel_assignments_with_splat_operator","()",""],["test_parallel_assignments_with_subarrays","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_parallel_assignments_with_subarrays","()",""],["test_parallel_assignments_with_too_few_variables","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_parallel_assignments_with_too_few_variables","()",""],["test_parentheses_also_capture_matched_content_by_number","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_parentheses_also_capture_matched_content_by_number","()",""],["test_parentheses_group_contents","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_parentheses_group_contents","()",""],["test_pattern","EdgeCase::Koan","EdgeCase/Koan.html#method-c-test_pattern","()",""],["test_period_is_a_shortcut_for_any_non_newline_character","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_period_is_a_shortcut_for_any_non_newline_character","()",""],["test_plus_concatenation_will_leave_the_original_strings_unmodified","AboutStrings","AboutStrings.html#method-i-test_plus_concatenation_will_leave_the_original_strings_unmodified","()",""],["test_plus_equals_also_will_leave_the_original_string_unmodified","AboutStrings","AboutStrings.html#method-i-test_plus_equals_also_will_leave_the_original_string_unmodified","()",""],["test_plus_equals_will_concatenate_to_the_end_of_a_string","AboutStrings","AboutStrings.html#method-i-test_plus_equals_will_concatenate_to_the_end_of_a_string","()",""],["test_plus_means_one_or_more","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_plus_means_one_or_more","()",""],["test_plus_will_concatenate_two_strings","AboutStrings","AboutStrings.html#method-i-test_plus_will_concatenate_two_strings","()",""],["test_proxy_can_record_more_than_just_tv_objects","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_proxy_can_record_more_than_just_tv_objects","()",""],["test_proxy_counts_method_calls","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_proxy_counts_method_calls","()",""],["test_proxy_handles_invalid_messages","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_proxy_handles_invalid_messages","()",""],["test_proxy_method_returns_wrapped_object","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_proxy_method_returns_wrapped_object","()",""],["test_proxy_records_messages_sent_to_tv","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_proxy_records_messages_sent_to_tv","()",""],["test_proxy_reports_methods_have_been_called","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_proxy_reports_methods_have_been_called","()",""],["test_pushing_and_popping_arrays","AboutArrays","AboutArrays.html#method-i-test_pushing_and_popping_arrays","()",""],["test_question_mark_means_optional","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_question_mark_means_optional","()",""],["test_raising_a_particular_error","AboutExceptions","AboutExceptions.html#method-i-test_raising_a_particular_error","()",""],["test_rescue_clause","AboutExceptions","AboutExceptions.html#method-i-test_rescue_clause","()",""],["test_rolling_the_dice_returns_a_set_of_integers_between_1_and_6","AboutDiceProject","AboutDiceProject.html#method-i-test_rolling_the_dice_returns_a_set_of_integers_between_1_and_6","()",""],["test_scalene_triangles_have_no_equal_sides","AboutTriangleProject","AboutTriangleProject.html#method-i-test_scalene_triangles_have_no_equal_sides","()",""],["test_scan_is_like_find_all","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_scan_is_like_find_all","()",""],["test_score_of_a_single_roll_of_1_is_100","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_a_single_roll_of_1_is_100","()",""],["test_score_of_a_single_roll_of_5_is_50","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_a_single_roll_of_5_is_50","()",""],["test_score_of_a_triple_1_is_1000","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_a_triple_1_is_1000","()",""],["test_score_of_an_empty_list_is_zero","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_an_empty_list_is_zero","()",""],["test_score_of_mixed_is_sum","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_mixed_is_sum","()",""],["test_score_of_multiple_1s_and_5s_is_the_sum_of_individual_scores","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_multiple_1s_and_5s_is_the_sum_of_individual_scores","()",""],["test_score_of_other_triples_is_100x","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_other_triples_is_100x","()",""],["test_score_of_single_2s_3s_4s_and_6s_are_zero","AboutScoringProject","AboutScoringProject.html#method-i-test_score_of_single_2s_3s_4s_and_6s_are_zero","()",""],["test_select_selects_certain_items_from_an_array","AboutIteration","AboutIteration.html#method-i-test_select_selects_certain_items_from_an_array","()",""],["test_send_with_underscores_will_also_send_messages","AboutMessagePassing","AboutMessagePassing.html#method-i-test_send_with_underscores_will_also_send_messages","()",""],["test_sending_a_message_with_arguments","AboutMessagePassing","AboutMessagePassing.html#method-i-test_sending_a_message_with_arguments","()",""],["test_sending_undefined_messages_to_a_typical_object_results_in_errors","AboutMessagePassing","AboutMessagePassing.html#method-i-test_sending_undefined_messages_to_a_typical_object_results_in_errors","()",""],["test_shifting_arrays","AboutArrays","AboutArrays.html#method-i-test_shifting_arrays","()",""],["test_shortcut_character_classes_are_negated_with_capitals","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_shortcut_character_classes_are_negated_with_capitals","()",""],["test_since_classes_are_objects_you_can_define_singleton_methods_on_them_too","AboutClassMethods","AboutClassMethods.html#method-i-test_since_classes_are_objects_you_can_define_singleton_methods_on_them_too","()",""],["test_single_quoted_string_do_not_interpret_escape_characters","AboutStrings","AboutStrings.html#method-i-test_single_quoted_string_do_not_interpret_escape_characters","()",""],["test_single_quoted_strings_are_also_strings","AboutStrings","AboutStrings.html#method-i-test_single_quoted_strings_are_also_strings","()",""],["test_single_quoted_strings_do_not_interpolate","AboutStrings","AboutStrings.html#method-i-test_single_quoted_strings_do_not_interpolate","()",""],["test_single_quotes_sometimes_interpret_escape_characters","AboutStrings","AboutStrings.html#method-i-test_single_quotes_sometimes_interpret_escape_characters","()",""],["test_slash_a_anchors_to_the_start_of_the_string","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_slash_a_anchors_to_the_start_of_the_string","()",""],["test_slash_b_anchors_to_a_word_boundary","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_slash_b_anchors_to_a_word_boundary","()",""],["test_slash_d_is_a_shortcut_for_a_digit_character_class","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_slash_d_is_a_shortcut_for_a_digit_character_class","()",""],["test_slash_s_is_a_shortcut_for_a_whitespace_character_class","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_slash_s_is_a_shortcut_for_a_whitespace_character_class","()",""],["test_slash_w_is_a_shortcut_for_a_word_character_class","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_slash_w_is_a_shortcut_for_a_word_character_class","()",""],["test_slash_z_anchors_to_the_end_of_the_string","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_slash_z_anchors_to_the_end_of_the_string","()",""],["test_slicing_arrays","AboutArrays","AboutArrays.html#method-i-test_slicing_arrays","()",""],["test_slicing_with_ranges","AboutArrays","AboutArrays.html#method-i-test_slicing_with_ranges","()",""],["test_small_integers_have_fixed_ids","AboutObjects","AboutObjects.html#method-i-test_small_integers_have_fixed_ids","()",""],["test_some_ruby_objects_are_not_coerced_to_what_you_might_expect","AboutJavaInterop","AboutJavaInterop.html#method-i-test_some_ruby_objects_are_not_coerced_to_what_you_might_expect","()",""],["test_some_ruby_objects_can_be_coerced_to_java","AboutJavaInterop","AboutJavaInterop.html#method-i-test_some_ruby_objects_can_be_coerced_to_java","()",""],["test_some_system_objects_always_have_the_same_id","AboutObjects","AboutObjects.html#method-i-test_some_system_objects_always_have_the_same_id","()",""],["test_sometimes_missing_parentheses_are_ambiguous","AboutMethods","AboutMethods.html#method-i-test_sometimes_missing_parentheses_are_ambiguous","()","<p>(NOTE: We are Using eval below because the example code is considered to be\nsyntactically invalid).\n"],["test_stand_alone_blocks_can_be_passed_to_methods_expecting_blocks","AboutBlocks","AboutBlocks.html#method-i-test_stand_alone_blocks_can_be_passed_to_methods_expecting_blocks","()",""],["test_strings_are_unique_objects","AboutStrings","AboutStrings.html#method-i-test_strings_are_unique_objects","()",""],["test_strings_can_be_joined","AboutStrings","AboutStrings.html#method-i-test_strings_can_be_joined","()",""],["test_strings_can_be_split","AboutStrings","AboutStrings.html#method-i-test_strings_can_be_split","()",""],["test_strings_can_be_split_with_different_patterns","AboutStrings","AboutStrings.html#method-i-test_strings_can_be_split_with_different_patterns","()",""],["test_sub_is_like_find_and_replace","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_sub_is_like_find_and_replace","()",""],["test_subclasses_add_new_behavior","AboutInheritance","AboutInheritance.html#method-i-test_subclasses_add_new_behavior","()",""],["test_subclasses_can_invoke_parent_behavior_via_super","AboutInheritance","AboutInheritance.html#method-i-test_subclasses_can_invoke_parent_behavior_via_super","()",""],["test_subclasses_can_modify_existing_behavior","AboutInheritance","AboutInheritance.html#method-i-test_subclasses_can_modify_existing_behavior","()",""],["test_subclasses_have_the_parent_as_an_ancestor","AboutInheritance","AboutInheritance.html#method-i-test_subclasses_have_the_parent_as_an_ancestor","()",""],["test_subclasses_inherit_behavior_from_parent_class","AboutInheritance","AboutInheritance.html#method-i-test_subclasses_inherit_behavior_from_parent_class","()",""],["test_subclasses_inherit_constants_from_parent_classes","AboutConstants","AboutConstants.html#method-i-test_subclasses_inherit_constants_from_parent_classes","()",""],["test_super_does_not_work_cross_method","AboutInheritance","AboutInheritance.html#method-i-test_super_does_not_work_cross_method","()",""],["test_swapping_with_parallel_assignment","AboutArrayAssignment","AboutArrayAssignment.html#method-i-test_swapping_with_parallel_assignment","()",""],["test_symbols_are_not_strings","AboutSymbols","AboutSymbols.html#method-i-test_symbols_are_not_strings","()",""],["test_symbols_are_symbols","AboutSymbols","AboutSymbols.html#method-i-test_symbols_are_symbols","()",""],["test_symbols_can_be_compared","AboutSymbols","AboutSymbols.html#method-i-test_symbols_can_be_compared","()",""],["test_symbols_can_be_dynamically_created","AboutSymbols","AboutSymbols.html#method-i-test_symbols_can_be_dynamically_created","()",""],["test_symbols_can_be_made_from_strings","AboutSymbols","AboutSymbols.html#method-i-test_symbols_can_be_made_from_strings","()",""],["test_symbols_cannot_be_concatenated","AboutSymbols","AboutSymbols.html#method-i-test_symbols_cannot_be_concatenated","()","<p>It’s important to realize that symbols are not “immutable strings”,\nthough they are immutable. …\n"],["test_symbols_do_not_have_string_methods","AboutSymbols","AboutSymbols.html#method-i-test_symbols_do_not_have_string_methods","()",""],["test_symbols_with_interpolation_can_be_built","AboutSymbols","AboutSymbols.html#method-i-test_symbols_with_interpolation_can_be_built","()",""],["test_symbols_with_spaces_can_be_built","AboutSymbols","AboutSymbols.html#method-i-test_symbols_with_spaces_can_be_built","()",""],["test_the_left_most_match_wins","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_the_left_most_match_wins","()",""],["test_the_shovel_operator_modifies_the_original_string","AboutStrings","AboutStrings.html#method-i-test_the_shovel_operator_modifies_the_original_string","()",""],["test_the_shovel_operator_will_also_append_content_to_a_string","AboutStrings","AboutStrings.html#method-i-test_the_shovel_operator_will_also_append_content_to_a_string","()",""],["test_to_s_is_called_on_interpolated_symbols","AboutSymbols","AboutSymbols.html#method-i-test_to_s_is_called_on_interpolated_symbols","()",""],["test_to_s_is_used_in_string_interpolation","AboutClasses","AboutClasses.html#method-i-test_to_s_is_used_in_string_interpolation","()",""],["test_to_s_provides_a_string_version_of_the_object","AboutClasses","AboutClasses.html#method-i-test_to_s_provides_a_string_version_of_the_object","()",""],["test_to_s_returns_a_string_representation","AboutToStr","AboutToStr.html#method-i-test_to_s_returns_a_string_representation","()",""],["test_to_str_allows_objects_to_be_treated_as_strings","AboutToStr","AboutToStr.html#method-i-test_to_str_allows_objects_to_be_treated_as_strings","()",""],["test_to_str_also_returns_a_string_representation","AboutToStr","AboutToStr.html#method-i-test_to_str_also_returns_a_string_representation","()",""],["test_top_level_constants_are_referenced_by_double_colons","AboutConstants","AboutConstants.html#method-i-test_top_level_constants_are_referenced_by_double_colons","()",""],["test_true_is_treated_as_true","AboutTrueAndFalse","AboutTrueAndFalse.html#method-i-test_true_is_treated_as_true","()",""],["test_tv_methods_still_perform_their_function","AboutProxyObjectProject","AboutProxyObjectProject.html#method-i-test_tv_methods_still_perform_their_function","()",""],["test_unless_statement","AboutControlStatements","AboutControlStatements.html#method-i-test_unless_statement","()",""],["test_unless_statement_evaluate_true","AboutControlStatements","AboutControlStatements.html#method-i-test_unless_statement_evaluate_true","()",""],["test_unless_statement_modifier","AboutControlStatements","AboutControlStatements.html#method-i-test_unless_statement_modifier","()",""],["test_use_backslash_for_those_hard_cases","AboutStrings","AboutStrings.html#method-i-test_use_backslash_for_those_hard_cases","()",""],["test_use_double_quotes_to_create_strings_with_single_quotes","AboutStrings","AboutStrings.html#method-i-test_use_double_quotes_to_create_strings_with_single_quotes","()",""],["test_use_flexible_quoting_to_handle_really_hard_cases","AboutStrings","AboutStrings.html#method-i-test_use_flexible_quoting_to_handle_really_hard_cases","()",""],["test_use_single_quotes_to_create_string_with_double_quotes","AboutStrings","AboutStrings.html#method-i-test_use_single_quotes_to_create_string_with_double_quotes","()",""],["test_use_the_prefix_scope_operator_to_force_the_global_scope","AboutScope","AboutScope.html#method-i-test_use_the_prefix_scope_operator_to_force_the_global_scope","()",""],["test_user_defined_code_can_check_for_to_str","AboutToStr","AboutToStr.html#method-i-test_user_defined_code_can_check_for_to_str","()",""],["test_using_a_java_library_class","AboutJavaInterop","AboutJavaInterop.html#method-i-test_using_a_java_library_class","()",""],["test_variables_can_also_be_used_to_access_captures","AboutRegularExpressions","AboutRegularExpressions.html#method-i-test_variables_can_also_be_used_to_access_captures","()",""],["test_while_statement","AboutControlStatements","AboutControlStatements.html#method-i-test_while_statement","()",""],["test_who_wins_with_both_nested_and_inherited_constants","AboutConstants","AboutConstants.html#method-i-test_who_wins_with_both_nested_and_inherited_constants","()",""],["test_who_wins_with_explicit_scoping_on_class_definition","AboutConstants","AboutConstants.html#method-i-test_who_wins_with_explicit_scoping_on_class_definition","()",""],["test_you_can_create_accessor_methods_to_return_instance_variables","AboutClasses","AboutClasses.html#method-i-test_you_can_create_accessor_methods_to_return_instance_variables","()",""],["test_you_can_define_class_methods_inside_the_class","AboutClassMethods","AboutClassMethods.html#method-i-test_you_can_define_class_methods_inside_the_class","()",""],["test_you_can_define_methods_on_individual_objects","AboutClassMethods","AboutClassMethods.html#method-i-test_you_can_define_methods_on_individual_objects","()",""],["test_you_can_get_a_list_of_constants_for_any_class_or_module","AboutScope","AboutScope.html#method-i-test_you_can_get_a_list_of_constants_for_any_class_or_module","()",""],["test_you_can_get_a_single_character_from_a_string","AboutStrings","AboutStrings.html#method-i-test_you_can_get_a_single_character_from_a_string","()",""],["test_you_can_get_a_substring_from_a_string","AboutStrings","AboutStrings.html#method-i-test_you_can_get_a_substring_from_a_string","()",""],["test_you_can_politely_ask_for_instance_variable_values","AboutClasses","AboutClasses.html#method-i-test_you_can_politely_ask_for_instance_variable_values","()",""],["test_you_can_reference_nested_classes_using_the_scope_operator","AboutScope","AboutScope.html#method-i-test_you_can_reference_nested_classes_using_the_scope_operator","()",""],["test_you_can_rip_the_value_out_using_instance_eval","AboutClasses","AboutClasses.html#method-i-test_you_can_rip_the_value_out_using_instance_eval","()",""],["test_you_can_roll_different_numbers_of_dice","AboutDiceProject","AboutDiceProject.html#method-i-test_you_can_roll_different_numbers_of_dice","()",""],["test_you_dont_get_null_pointer_errors_when_calling_methods_on_nil","AboutNil","AboutNil.html#method-i-test_you_dont_get_null_pointer_errors_when_calling_methods_on_nil","()",""],["testmethods","EdgeCase::Koan","EdgeCase/Koan.html#method-c-testmethods","()","<p>Lazy initialize list of test methods.\n"],["tests_disabled?","EdgeCase::Koan","EdgeCase/Koan.html#method-c-tests_disabled-3F","()",""],["to_s","AboutClasses::Dog7","AboutClasses/Dog7.html#method-i-to_s","()",""],["to_s","AboutToStr::CanBeTreatedAsString","AboutToStr/CanBeTreatedAsString.html#method-i-to_s","()",""],["to_s","AboutToStr::CanNotBeTreatedAsString","AboutToStr/CanNotBeTreatedAsString.html#method-i-to_s","()",""],["to_str","AboutToStr::CanBeTreatedAsString","AboutToStr/CanBeTreatedAsString.html#method-i-to_str","()",""],["total_tests","EdgeCase::Koan","EdgeCase/Koan.html#method-c-total_tests","()",""],["triangle","Object","Object.html#method-i-triangle","(a, b, c)","<p>Triangle analyzes the lengths of the sides of a triangle (represented by a,\nb and c) and returns the …\n"],["truth_value","AboutTrueAndFalse","AboutTrueAndFalse.html#method-i-truth_value","(condition)",""],["use_colors?","EdgeCase::Color","EdgeCase/Color.html#method-i-use_colors-3F","()",""],["using_win32console","EdgeCase::Color","EdgeCase/Color.html#method-i-using_win32console","()",""],["using_windows?","EdgeCase::Color","EdgeCase/Color.html#method-i-using_windows-3F","()",""],["wag","AboutClassMethods::Dog2","AboutClassMethods/Dog2.html#method-i-wag","()",""],["wag","AboutClassMethods::Dog2","AboutClassMethods/Dog2.html#method-c-wag","()",""],["wag","AboutInheritance::Chihuahua","AboutInheritance/Chihuahua.html#method-i-wag","()",""],["wag","AboutOpenClasses::Dog","AboutOpenClasses/Dog.html#method-i-wag","()",""],["walk","EdgeCase::ThePath","EdgeCase/ThePath.html#method-i-walk","()",""],["yield_tester","AboutBlocks","AboutBlocks.html#method-i-yield_tester","()",""],["GREED_RULES","","GREED_RULES_txt.html","","<p>Playing Greed\n<p>Greed is a dice game played among 2 or more players, using 5 six-sided\ndice.\n<p>Playing Greed …\n"],["README","","README_rdoc.html","","<p>EdgeCase Ruby Koans\n<p>The Ruby Koans walk you along the path to enlightenment in order to learn\nRuby. The …\n"],["example_file","","example_file_txt.html","","<p>this is a test\n"]]}}